[{"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\reportWebVitals.js":"1","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\App.js":"2","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Navbar\\Navbar.js":"3","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Home\\Home.js":"4","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Helper.js":"5","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\index.js":"6","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Reply\\Reply.js":"7"},{"size":362,"mtime":1606236316379,"results":"8","hashOfConfig":"9"},{"size":697,"mtime":1606242449513,"results":"10","hashOfConfig":"9"},{"size":152,"mtime":1606245376282,"results":"11","hashOfConfig":"9"},{"size":2273,"mtime":1606479890816,"results":"12","hashOfConfig":"9"},{"size":10393,"mtime":1606486091805,"results":"13","hashOfConfig":"9"},{"size":500,"mtime":1606236316379,"results":"14","hashOfConfig":"9"},{"size":1362,"mtime":1606484783288,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lao15b",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\reportWebVitals.js",[],"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\App.js",["33"],"import logo from './logo.svg';\nimport './App.css';\nimport {Switch, Route, BrowserRouter as Router} from 'react-router-dom';\nimport Home from './components/Home/Home';\nimport Navbar from './components/Navbar/Navbar';\n\n\nfunction App() {\n  return (\n      <Router>\n        <div className=\"App col\">\n            <Navbar />\n            <Switch>\n                <Route path=\"/about\">\n                {/* <About /> */}\n                </Route>\n                <Route path=\"/users\">\n                {/* <Users /> */}\n                </Route>\n                <Route path=\"/\">\n                <Home />\n                </Route>\n            </Switch>\n        </div>\n      </Router>\n  );\n}\n\nexport default App;\n","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Navbar\\Navbar.js",["34"],"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Home\\Home.js",["35"],"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Helper.js",["36","37","38","39","40","41","42","43","44","45"],"import { Fab } from \"@material-ui/core\";\r\nimport { Add } from \"@material-ui/icons\"\r\nimport Reply from \"./Reply/Reply\";\r\n\r\nexport const api = 'http://localhost:2999';\r\nexport const parseBody = body =>\r\n    [...body.replace(/\\n\\s*\\n/g, '\\n').split('\\n')].map(x=>Content.parse(x));\r\n// CREATE TABLE users (\r\n//     id serial primary key,\r\n//     name VARCHAR(32),\r\n//     email VARCHAR(64),\r\n//     last_login timestamp NOT NULL DEFAULT NOW(),\r\n//     achievements VARCHAR(64)[],\r\n//     score integer DEFAULT 0\r\n//   );\r\nexport class User{  \r\n    constructor(id, name, email, achievements, score){\r\n        if(!name) Object.assign(this,id);\r\n        else Object.assign(this, {id, name, email, achievements, score});\r\n    }\r\n    static users = [];\r\n    static from(a){\r\n        return a.map(b=>new User(b));\r\n    }\r\n}\r\n// id serial primary key,\r\n// postType VARCHAR(32),\r\n// broadcast varchar(32) default 'Public',\r\n// body text[],\r\n// title varchar(80),\r\n// postDate timestamp NOT NULL DEFAULT NOW(),\r\n// userId int NOT NULL,\r\n// FOREIGN KEY(userId) REFERENCES users(id) ON DELETE CASCADE\r\nexport class Post{\r\n    constructor(id,userId,title,body = [], comments=[],postDate){\r\n        if(!userId) Object.assign(this,{comments:[],body:[]},id);\r\n        else Object.assign(this,{comments:[],body:[]},{id, userId,title,comments,body,postDate});\r\n        this.body = Content.parse(this.body);\r\n        // console.log(arguments);\r\n        Post.posts[id] = this;\r\n    }\r\n    static posts = []\r\n    render(user){\r\n        var like = this.likes.find(l=>l.userid==this.userid);\r\n        console.log('individual post #',this.id,' with ',this.comments.length,'comments','is replying?',window.corktaint.reply==this);\r\n        return (\r\n            <div className='content-post col' key={this.id}>\r\n                <div className='col post-container'>\r\n                    {this.body.map((c,i)=>c.render(i))}\r\n                </div>\r\n                <div className='post-like-count' >\r\n                    <span onClick={()=>like?Like.deleteLike(like,this):Like.likeObj(this)}>{this.likes.length} {like?<>❤️</>:<>♡</>}</span>\r\n                    {window.corktaint.reply==this?<Reply/>:\r\n                    <span className='row'><Fab color='primary' onClick={()=>{window.corktaint.reply=this;window.corktaint.refresh()}}>\r\n                        <Add/>\r\n                    </Fab></span>\r\n                    }\r\n                </div>\r\n                <div className='post-comments'>\r\n                    {this.comments.length?\r\n                        this.comments.map((c,i)=>c.render(user,i)):\r\n                        <p>No Comments Yet...{this.comments.length}</p>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    static render(user,posts){\r\n        console.log('starting page render');\r\n        window.corktaint.setPosts(posts);\r\n        return (\r\n            <div className='content-posts col wrap'>\r\n                {posts.map(p=>p.render(user))}\r\n            </div>\r\n        )\r\n    }\r\n    static createPostFrom(userid,title,body){\r\n        // console.log('creating post at',Post.posts.length, title, body);\r\n        return new Post(Post.posts.length, userid, title, parseBody(body));\r\n    }\r\n    static async from(a){\r\n        let posts = a.map(b=>new Post(b));\r\n        var promises = posts.map(p=>fetch(`${api}/comments/posts/${p.id}`)\r\n            .then(r=>r.json())\r\n            .then(r=>{\r\n                const [a,b] = Comment.from(r,5);\r\n                p.comments = a;\r\n                a.forEach(aa=>aa.parent = p);\r\n                return Promise.all(b);\r\n            }\r\n        )).concat(posts.map(p=>Like.getLikesFor(p)));\r\n        do{\r\n            promises = (await Promise.all(promises)).filter(p=>p.then);\r\n        }\r\n        while(promises.length);\r\n        console.log('finished',posts,window.corktaint);\r\n        window.corktaint.setPage(Post.render(window.corktaint.user,posts));\r\n    }\r\n}\r\n// id serial primary key,\r\n// broadcast varchar(32) default 'Public',\r\n// body text[],\r\n// userId int NOT NULL,\r\n// FOREIGN KEY(userId) REFERENCES users(id) ON DELETE CASCADE,\r\n// postDate timestamp NOT NULL DEFAULT NOW()\r\nexport class Comment{\r\n    constructor(id, body = [], userid, comments = [], postdate = ''){\r\n        Object.assign(this,{body:[],comments:[],likes:[]});\r\n        if(!body.length) Object.assign(this,id);\r\n        else Object.assign(this,{id, body, userid, comments, postdate});\r\n        this.body = Content.parse(this.body, this);\r\n        ['like','unlike','edit','destroy','reply'].forEach(f=>this[f]=this[f].bind(this));\r\n    }\r\n    render(user){\r\n        var like = this.likes.find(l=>l.userid==this.userid);\r\n        // console.log(this.body,this.comments);\r\n        return [\r\n            <div className='comment-container' key={this.id}>\r\n                {this.body.map((c,i)=>c.render(i))}\r\n                {this.likes.length ? <p className='comment-like-count'>{this.likes.length} ❤️</p> : null}\r\n                <div className='comment-options'>\r\n                    { !like ?\r\n                        <><span onClick={()=>this.like(user)}>Like</span> | </>:\r\n                        <><span onClick={()=>this.unlike(like)}>Unlike</span> | </>\r\n                    }\r\n                    <span onClick={()=>this.reply()}> Reply</span> |\r\n                    { user.id == this.userid || user.admin ?\r\n                        <>\r\n                            <span onClick={()=>this.edit(user)}> Edit</span> | \r\n                            <span onClick={()=>this.destroy()} > Delete</span>\r\n                        </>:null\r\n                    }    \r\n                </div>\r\n                { window.corktaint.reply==this?<Reply/>:null}     \r\n                <div className='comment-chain'>\r\n                    {this.comments.map((c)=>c.render(user))}\r\n                </div>\r\n            </div>\r\n        ]\r\n    }\r\n    unlike(like){\r\n        Like.deleteLike(like,this);\r\n    }\r\n    reply(){\r\n        window.corktaint.reply=window.corktaint.reply!=this?this:null;\r\n        window.corktaint.refresh();\r\n    }\r\n    like(user){\r\n        Like.likeObj(this);\r\n    }\r\n    edit(){\r\n        window.corktaint.reply=window.corktaint.reply!=this?this:null;\r\n        window.corktaint.refresh();\r\n    }\r\n    destroy(){\r\n        fetch(`${api}/comments/${this.id}`,{method:'delete'})\r\n            .then(r=>{\r\n                this.parent.comments.splice(this.parent.comments.indexOf(this),1);\r\n                window.corktaint.refresh();\r\n            });\r\n    }\r\n    static from(a, i, set){\r\n        if(--i<0)return [];\r\n        let comments = a.map(b=>new Comment(b));\r\n        var promises = comments.map(c=>fetch(`${api}/comments/comments/${c.id}`)\r\n            .then(r=>r.json())\r\n            .then(r=>{\r\n                const [a,b]=Comment.from(r,i);\r\n                c.comments = a || [];\r\n                c.comments.forEach(cc=>cc.parent=c);\r\n                if(b)return Promise.all(b);\r\n            })).concat(comments.map(c=>Like.getLikesFor(c)));\r\n        return [comments, promises]\r\n    }\r\n    static async addCommentTo(obj,body){\r\n        return fetch(`${api}/comments/${obj.constructor.name.toLowerCase()}s/${obj.id}`,{\r\n            method:'post',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({body,userid:window.corktaint.user.id})\r\n        }).then(r=>r.json()).then(r=>{\r\n            obj.comments.push(new Comment(r[0]));\r\n            return 1;\r\n        });\r\n    }\r\n}\r\nexport class Like{\r\n    constructor(a){\r\n        Object.assign(this,a);\r\n    }\r\n    static getLikesFor(obj){\r\n        // console.log('atempting to get likes for',obj.constructor.name,' id',obj.id);\r\n        return fetch(`${api}/likes/${obj.constructor.name.toLowerCase()}s/${obj.id}`)\r\n            .then(r=>r.json())\r\n            .then(r=>obj.likes=r);\r\n    }\r\n    static likeObj(obj){\r\n        return fetch(`${api}/likes/${obj.constructor.name}s/${obj.id}`,{\r\n            method:'POST',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({userid:window.corktaint.user.id})\r\n        }).then(r=>r.json()).then(r=>{\r\n            obj.likes = obj.likes.concat(r);\r\n            window.corktaint.refresh();\r\n        });\r\n    }\r\n    static deleteLike(like,obj){\r\n        return fetch(`${api}/likes/${like.id}`,{method:'DELETE'})\r\n            .then(r=>{\r\n                obj.likes.splice(obj.likes.findIndex(a=>a.id==like.id),1);\r\n                window.corktaint.refresh();\r\n            })\r\n    }\r\n}\r\nexport class Content{\r\n    constructor(content, type = 'text', title, parent){\r\n        Object.assign(this, {content, type, title, parent});\r\n    }\r\n    render(i){\r\n        // console.log('content #'+this.id+' needs value');\r\n        return this.type == 'text' ?\r\n            (<p className='content content-text' key={i}>{this.content}</p>):\r\n            (<img className='content content-img' src={this.content} alt={this.title||''} key={i}/>)\r\n    }\r\n    static parse(val,parent){\r\n        if(Array.isArray(val))return val.map(a=>Content.parse(a,parent));\r\n        let match = val.match(/(\\[(.*?)\\]\\((.*?)\\))/);\r\n        // console.log('found match',match);\r\n        if(match && match.length > 1)return new Content(match[3], 'img', match[4],parent);\r\n        else return new Content(val,'text','hi',parent);\r\n    }\r\n    static toBody(a){\r\n        return a.map(b=>b.content);\r\n    }\r\n\r\n}\r\n\r\n/*export const abe = new User(0,'Abe Johnson');\r\n\r\nexport const firstPost = new Post(Post.posts.length, abe,'This is my first post',[new Content('Here is my first content post'),new Content('It is filled with information'),new Content('https://s3-cdn.withwine.com/Wine/zrLjkNQrhk2dPco2FplGNg.png?h=256&autorotate=true','img','wine'), new Content('Ex Dee')]);\r\nexport const p2 = new Post(Post.posts.length, abe,'This is my second post',[new Content('Here is my first content post'),new Content('It is filled with information'),new Content('https://s3-cdn.withwine.com/Wine/zrLjkNQrhk2dPco2FplGNg.png?h=256&autorotate=true','img','wine'), new Content('Ex Dee')]);\r\nexport const p3 = new Post(Post.posts.length, abe,'This is my third post',[new Content('Here is my first content post'),new Content('It is filled with information'),new Content('https://s3-cdn.withwine.com/Wine/zrLjkNQrhk2dPco2FplGNg.png?h=256&autorotate=true','img','wine'), new Content('Ex Dee')]);\r\n*/","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\index.js",[],"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Reply\\Reply.js",["46"],"import { Button } from \"@material-ui/core\"\r\nimport { useState } from \"react\"\r\nimport { parseBody, Comment, Content } from \"../Helper\"\r\n\r\nexport default props => {\r\n    const [value, setValue] = useState('');\r\n    return (\r\n        <div className='reply-container col'>\r\n            <div className='reply-content row'>\r\n                <textarea id='reply' onInput={e=>setValue(e.target.value)} />\r\n                <div className='reply-preview'>\r\n                    <h3 className='preview-title'>Preview:</h3>\r\n                    <div className='preview-contents'>{parseBody(value).map((c,i)=>c.render(i))}</div>\r\n                </div>\r\n            </div>\r\n            <div className='reply-buttons row'>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={()=>{\r\n                    Comment.addCommentTo(window.corktaint.reply, Content.toBody(parseBody(value)))\r\n                        .then(r=>{\r\n                            window.corktaint.reply = null;\r\n                            window.corktaint.refresh();\r\n                        });\r\n                }}>Submit</Button>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={()=>{\r\n                    window.corktaint.reply = null;\r\n                    window.corktaint.refresh();\r\n                }}>Cancel</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}",{"ruleId":"47","severity":1,"message":"48","line":1,"column":8,"nodeType":"49","messageId":"50","endLine":1,"endColumn":12},{"ruleId":"51","severity":1,"message":"52","line":1,"column":1,"nodeType":"53","endLine":7,"endColumn":2},{"ruleId":"51","severity":1,"message":"52","line":8,"column":1,"nodeType":"53","endLine":62,"endColumn":2},{"ruleId":"54","severity":1,"message":"55","line":44,"column":47,"nodeType":"56","messageId":"57","endLine":44,"endColumn":49},{"ruleId":"54","severity":1,"message":"55","line":45,"column":127,"nodeType":"56","messageId":"57","endLine":45,"endColumn":129},{"ruleId":"54","severity":1,"message":"55","line":53,"column":44,"nodeType":"56","messageId":"57","endLine":53,"endColumn":46},{"ruleId":"54","severity":1,"message":"55","line":115,"column":47,"nodeType":"56","messageId":"57","endLine":115,"endColumn":49},{"ruleId":"54","severity":1,"message":"55","line":127,"column":31,"nodeType":"56","messageId":"57","endLine":127,"endColumn":33},{"ruleId":"54","severity":1,"message":"55","line":134,"column":41,"nodeType":"56","messageId":"57","endLine":134,"endColumn":43},{"ruleId":"54","severity":1,"message":"58","line":145,"column":54,"nodeType":"56","messageId":"57","endLine":145,"endColumn":56},{"ruleId":"54","severity":1,"message":"58","line":152,"column":54,"nodeType":"56","messageId":"57","endLine":152,"endColumn":56},{"ruleId":"54","severity":1,"message":"55","line":209,"column":61,"nodeType":"56","messageId":"57","endLine":209,"endColumn":63},{"ruleId":"54","severity":1,"message":"55","line":220,"column":26,"nodeType":"56","messageId":"57","endLine":220,"endColumn":28},{"ruleId":"51","severity":1,"message":"52","line":5,"column":1,"nodeType":"53","endLine":31,"endColumn":2},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='."]
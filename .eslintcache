[{"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Home\\Home.js":"1","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Reply\\Reply.js":"2","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Helper.js":"3","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\index.js":"4","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\App.js":"5","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Navbar\\Navbar.js":"6","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\SingleUser\\SingleUser.js":"7","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Login\\Login.js":"8","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Terms\\Terms.js":"9","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\NavbarModal\\NavbarModal.js":"10","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\WineMap\\WineMap.js":"11","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Leaderboard\\Leaderboard.js":"12","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\NavbarModal\\Account.js":"13"},{"size":4360,"mtime":1607272801248,"results":"14","hashOfConfig":"15"},{"size":1800,"mtime":1606747250803,"results":"16","hashOfConfig":"15"},{"size":16873,"mtime":1607298883571,"results":"17","hashOfConfig":"15"},{"size":500,"mtime":1606236316379,"results":"18","hashOfConfig":"15"},{"size":618,"mtime":1607106277783,"results":"19","hashOfConfig":"15"},{"size":2677,"mtime":1607298793771,"results":"20","hashOfConfig":"15"},{"size":2852,"mtime":1607277990436,"results":"21","hashOfConfig":"15"},{"size":2465,"mtime":1607298990808,"results":"22","hashOfConfig":"15"},{"size":512,"mtime":1607018808883,"results":"23","hashOfConfig":"15"},{"size":1203,"mtime":1607296332895,"results":"24","hashOfConfig":"15"},{"size":735,"mtime":1607104661138,"results":"25","hashOfConfig":"15"},{"size":2217,"mtime":1607278232847,"results":"26","hashOfConfig":"15"},{"size":1048,"mtime":1607302407314,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"lao15b",{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Home\\Home.js",["59","60","61","62","63","64"],"import {Fab, Tooltip} from \"@material-ui/core\";\r\nimport { Edit, Add, Image, Map } from \"@material-ui/icons\"\r\nimport { useEffect, useState } from \"react\";\r\nimport { Post, User, api, corktaint } from \"../Helper\";\r\nimport Reply from '../Reply/Reply';\r\nimport {useSpring, animated, config} from 'react-spring';\r\nimport WineMap from '../WineMap/WineMap';\r\nimport {Switch, Route, BrowserRouter as Router} from 'react-router-dom';\r\nimport Leaderboard from \"../Leaderboard/Leaderboard\";\r\nimport SingleUser from \"../SingleUser/SingleUser\";\r\n\r\nconst home = {name:'Home',isPost:true};\r\nexport function newPost(){\r\n    corktaint.reply = home;\r\n    corktaint.refresh();\r\n}\r\nexport default function Home(props){\r\n    const button ={\r\n        length:120,\r\n        to:{bottom:0,left:150,opacity:1},\r\n        from:{bottom:60,left:0,opacity:0,pointerEvents:'none'},\r\n        config:{duration:5000},\r\n        count:4,\r\n        getTo:function(i){\r\n            return {\r\n                opacity:1,\r\n                left:this.length * Math.cos(Math.PI * i / this.count),\r\n                bottom:this.length * Math.sin(Math.PI * i / this.count) + 60,\r\n                pointerEvents:'all'\r\n            }\r\n        }\r\n    }\r\n    const [newPostButton, setNewPostButton] = useSpring(()=>button.from);\r\n    const [newImageButton, setNewImageButton] = useSpring(()=>button.from);\r\n    const [newMapButton, setNewMapButton] = useSpring(()=>button.from);\r\n    const [moreButtons, setMoreButtons] = useState(false);\r\n    const {view, setView} = props;\r\n    let [page, setPage] = useState(<></>);\r\n    useEffect(()=>{\r\n        // fetch(`${api}/users`)\r\n        // .then(r=>r.json())\r\n        // .then(r=>User.from(r))\r\n        // .then(r=>{\r\n        //     setUsers(r)\r\n        //     setUser(r[0]);\r\n        //     return true;\r\n        // })\r\n        // .then(r=>\r\n        fetch(`${api}/user/1/feed`)\r\n        .then(r=>r.json())\r\n        .then(r=>Post.from(r))\r\n    },[]);\r\n    useEffect(()=>{\r\n        Object.assign(corktaint,{setPage}); \r\n    },[page]);\r\n    \r\n    const showButtons = () =>{\r\n        setMoreButtons(true);\r\n        setNewPostButton(button.getTo(2));\r\n        setNewImageButton(button.getTo(1));\r\n        setNewMapButton(button.getTo(3));\r\n    }\r\n    const hideButtons = () => {\r\n        setMoreButtons(false);\r\n        setNewPostButton(button.from);\r\n        setNewImageButton(button.from);\r\n        setNewMapButton(button.from);\r\n    }\r\n    console.log('about to render page');\r\n    const showPost = () =>{\r\n        corktaint.reply=home;\r\n        corktaint.refresh();\r\n    }\r\n    return (\r\n        <div className='home main-container open-container col' name='New Post'>\r\n            <Switch>\r\n                <Route exact path='/'>\r\n                 {corktaint.reply==home ? <div className='reply-wrapper'><Reply/></div>:\r\n                    <><div className='main-button-hover' onMouseLeave={hideButtons}><div className='main-button'>\r\n                        <Fab color=\"primary\" aria-label=\"add\" onClick={moreButtons?showPost:showButtons} onMouseEnter={showButtons}>\r\n                            <Add />\r\n                        </Fab>\r\n                        {moreButtons ? ' ':'.'}\r\n                        {/* {moreButtons? */}\r\n                            <Tooltip title='New Post' placement='top'><animated.div className={`hover-button ${moreButtons?'':'disabled'}`} style={newPostButton}><Fab color='secondary' onClick={showPost} ><Edit/></Fab></animated.div></Tooltip>\r\n                            <Tooltip title='Upload Gallery' placement='top'><animated.div className={`hover-button ${moreButtons?'':'disabled'}`} style={newImageButton}><Fab color='secondary' onClick={showPost} ><Image/></Fab></animated.div></Tooltip>\r\n                            <Tooltip title='Submit Review' placement='top'><animated.div className={`hover-button ${moreButtons?'':'disabled'}`} style={newMapButton}><Fab color='secondary' onClick={showPost} ><Map/></Fab></animated.div></Tooltip>\r\n                            {/* :null} */}\r\n                    </div></div>\r\n                    </>}\r\n                {page}\r\n                </Route>\r\n                <Route path='/user/:id'><SingleUser/></Route>\r\n                <Route path='/map'> <WineMap/> </Route>\r\n                <Route path='/leaderboard'><Leaderboard/></Route>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Reply\\Reply.js",["65","66"],"import { Button } from \"@material-ui/core\"\r\nimport { useState } from \"react\"\r\nimport { parseBody, Comment, Content, Post, corktaint } from \"../Helper\"\r\n\r\nexport default props => {\r\n    const [value, setValue] = useState(props.value || '');\r\n    const [title, setTitle] = useState(props.value || '')\r\n    return (\r\n        <div className='reply-container col'>\r\n            {corktaint.reply.isPost?\r\n                <input value={title} onInput={e=>setTitle(e.target.value)} className='post-title-input' placeholder='Title'/>:null}\r\n            <div className='reply-content row'>\r\n                <textarea id='reply' onInput={e=>setValue(e.target.value)} defaultValue={value}/>\r\n                <div className='reply-preview'>\r\n                    <h3 className='preview-title'>Preview:</h3>\r\n                    <div className='preview-contents'>{parseBody(value).map((c,i)=>c.render(i))}</div>\r\n                </div>\r\n            </div>\r\n            <div className='reply-buttons row'>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={()=>{\r\n                    if(corktaint.reply.isPost)\r\n                        Post.submitNewPost(title,Content.fullValues(parseBody(value)));\r\n                    else\r\n                        if(corktaint.reply.replyMode != 'edit')\r\n                            Comment.addCommentTo(corktaint.reply, Content.fullValues(parseBody(value)));\r\n                        else\r\n                            corktaint.reply.edit(Content.fullValues(parseBody(value)))\r\n                }}>Submit</Button>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={()=>{\r\n                    corktaint.reply = null;\r\n                    corktaint.refresh();\r\n                }}>Cancel</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Helper.js",["67","68","69","70","71","72","73","74","75","76","77","78","79"],"import { Avatar, Button, Fab, Tooltip } from \"@material-ui/core\";\r\nimport { Add, Close, Remove } from \"@material-ui/icons\"\r\nimport Reply from \"./Reply/Reply\";\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport {Link} from 'react-router-dom';\r\nimport { useSpring } from \"react-spring\";\r\n\r\nexport const api = 'http://localhost:2999';\r\n// export const sqlDateToJavascript = n => new Date(Date.UTC(...n.split(/[- :]/))).toString();\r\nexport const sqlDateToJavascript = n =>{\r\n    let d = new Date(n);\r\n    return `${d.toLocaleDateString()} ${d.toLocaleTimeString()}`;\r\n}\r\nexport const trim = (s, i=40)=> s.length<i?s:s.substr(0,37)+'...';\r\nexport const parseBody = body =>\r\n    [...body.replace(/\\n\\s*\\n/g, '\\n').split('\\n')].map(x=>Content.parse(x));\r\nexport const increment = (o,i=1) => {Object.keys(o).forEach(k=>o[k]=(o[k]||0)+i);return o}\r\nexport class User{  \r\n    constructor(id, name, email, achievements, score){\r\n        if(!name) Object.assign(this,id);\r\n        else Object.assign(this, {id, name, email, achievements, score});\r\n        User.users[`${this.id}`] = this;\r\n        console.log('created new user',this.name,this.id);\r\n    }\r\n    static users = {};\r\n    static from(a){\r\n        return a.map(b=>new User(b));\r\n    }\r\n    static get(id){\r\n        if(User.users[id])return User.users[id];\r\n        return fetch(`${api}/users/${id}`)\r\n            .then(r=>r.json()).then(r=>new User(r[0]))\r\n    }\r\n    async changeScoreBy(i=1){\r\n        return fetch(`${api}/users/${this.id}`,{\r\n            method:'put',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({score:this.score+=i,lastaction:'now()',trend:increment(this.trend,i)})\r\n        });\r\n    }\r\n    get avatar(){return <Avatar>{this.name[0]}</Avatar>}\r\n}\r\n\r\nexport class Post{\r\n    constructor(id,userId,title,body = [], comments=[],postDate){\r\n        Object.assign(this,{comments:[],body:[],likes:[]});\r\n        if(!userId) Object.assign(this,id);\r\n        else Object.assign(this,{id, userId,title,comments,body,postDate});\r\n        this.body = Content.parse(this.body);\r\n        // console.log(arguments);\r\n        Post.posts[`${this.id}`] = this;\r\n        ['like','unlike','destroy','clickEdit','toggleHide'].forEach(m=>this[m]=this[m].bind(this));\r\n    }\r\n    static posts = {};\r\n    render(){\r\n        var _like = this.likes.find(l=>l.userid==corktaint.user.id);\r\n        var admin = this.userid == corktaint.user.id || corktaint.user.admin;\r\n        //console.log('individual post #',this.id,' with ',this.comments.length,'comments','is replying?',corktaint.reply==this);\r\n        return (\r\n            <div className='content-post col' key={this.id}>\r\n                <Tooltip title='Hide'><Fab color='primary'className='hide-post-button' onClick={this.toggleHide}><Remove/></Fab></Tooltip>\r\n                {!this.hide?<>\r\n                    {admin ? <Tooltip title='Delete Post'><Fab color='primary' className='delete-post-button' onClick={this.destroy}> <Close/> </Fab></Tooltip>: null}\r\n                    <div className='col post-container'>\r\n                        {corktaint.reply!=this?this.body.map((c,i)=>c.render(i)):<Reply value={Content.fullValues(this.body).join('\\n')}/>}\r\n                    </div>\r\n                    {admin?<p className='post-edit link' onClick={this.clickEdit}>Edit</p>:null}\r\n                    <div className='post-credit'>\r\n                        <Link to={`/user/${this.userid}`}><p>- {User.users[this.userid].name}</p></Link><p>{sqlDateToJavascript(this.postdate)}</p>\r\n                        </div>\r\n                    <div className='post-like-count' >\r\n                        <Tooltip title={_like?'Unlike':'Like'} placement='top'><span onClick={()=>!_like?this.like():this.unlike(_like)}>{this.likes.length} {_like?<>❤️</>:<>♡</>}</span></Tooltip>\r\n                        {corktaint.reply==this?<Reply/>:\r\n                        <span className='row post-reply-button'><Tooltip title='Reply' placement='top'><Fab color='primary' onClick={()=>{corktaint.reply=this;corktaint.refresh()}}>\r\n                            <Add/>\r\n                        </Fab></Tooltip></span>\r\n                        }\r\n                    </div>\r\n                <div className='post-comments'>\r\n                    {this.comments.length?\r\n                        this.comments.map((c,i)=>c.render(i)):\r\n                        <p>No Comments Yet...</p>\r\n                    }\r\n                </div>\r\n                </>:null}\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    static get(id){\r\n        if(Post.posts[id])return Post.posts[id];\r\n        return fetch(`${api}/posts/${id}`)\r\n            .then(r=>r.json()).then(r=>new Post(r[0]))\r\n    }\r\n    static render(posts){\r\n        //corktaint.setPosts(posts);\r\n        corktaint.posts = posts;\r\n        return (\r\n            <div className='content-posts col wrap'>\r\n                {posts.map(p=>p.render())}\r\n            </div>\r\n        )\r\n    }\r\n    get desc(){return trim(Content.fullValues(this.body.slice(0,3)).join(''))}\r\n    like(){\r\n        Like.likeObj(this); \r\n        User.users[this.userid].changeScoreBy(1);\r\n        this.changeScoreBy(1);\r\n    }\r\n    unlike(like){\r\n        Like.deleteLike(like,this);\r\n        User.users[this.userid].changeScoreBy(-1);\r\n        this.changeScoreBy(-1);\r\n    }\r\n    clickEdit(){\r\n        this.replyMode = 'edit';\r\n        corktaint.reply=this;\r\n        corktaint.refresh();\r\n    }\r\n    static createPostFrom(userid,title,body){\r\n        // console.log('creating post at',Post.posts.length, title, body);\r\n        return new Post(Post.posts.length, userid, title, parseBody(body));\r\n    }\r\n    destroy(){\r\n        fetch(`${api}/posts/${this.id}`,{method:'delete'})\r\n            .then(r=>{\r\n                corktaint.posts.splice(this.id,1);\r\n                corktaint.refresh();\r\n            });\r\n    }\r\n    async changeScoreBy(i=1){\r\n        return fetch(`${api}/posts/${this.id}`,{\r\n            method:'put',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({score:this.score+=i,lastaction:'now()',trend:increment(this.trend,i)})\r\n        });\r\n    }\r\n    edit(body){\r\n        return fetch(`${api}/posts/${this.id}`,{\r\n            method:'put',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({body})\r\n        }).then(()=>this.body = Content.parse(body))\r\n        .then(r=>{\r\n            corktaint.reply = null;\r\n            corktaint.refresh();\r\n        });\r\n    }\r\n    static submitNewPost(title,body){\r\n        return fetch(`${api}/posts`,{\r\n            method:'post',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({userid:corktaint.user.id,body,title}),\r\n        }).then(r=>r.json()).then(r=>{\r\n            corktaint.posts.push(new Post(r[0]));\r\n            // console.log(corktaint.posts[corktaint.posts.length-1]);\r\n            corktaint.reply = null;\r\n            corktaint.refresh();\r\n        })\r\n    }\r\n    getComments(){\r\n        if(this.commentsLoaded)return;\r\n        return fetch(`${api}/comments/posts/${this.id}`)\r\n            .then(r=>r.json())\r\n            .then(r=>{\r\n                const [a,b] = Comment.from(r,5);\r\n                this.comments = a;\r\n                a.forEach(aa=>aa.parent = this);\r\n                this.commentsLoaded=true;\r\n                return Promise.all(b);\r\n            }\r\n        );\r\n    }\r\n    static async from(a){\r\n        let posts = a.map(b=>Post.posts[b.id]||new Post(b));\r\n        var promises = posts.map(p=>p.getComments()).concat(posts.map(p=>Like.getLikesFor(p))).concat(posts.map(p=>User.get(p.userid)));\r\n        do{\r\n            promises = (await Promise.all(promises)).filter(p=>p&&p.then);\r\n        }\r\n        while(promises.length);\r\n        console.log('finished promises',posts,corktaint,User.users);\r\n        corktaint.posts=posts;\r\n        corktaint.refresh();\r\n    }\r\n    toggleHide(){\r\n        this.hide=!this.hide;\r\n        corktaint.refresh();\r\n    }\r\n}\r\n// id serial primary key,\r\n// broadcast varchar(32) default 'Public',\r\n// body text[],\r\n// userId int NOT NULL,\r\n// FOREIGN KEY(userId) REFERENCES users(id) ON DELETE CASCADE,\r\n// postDate timestamp NOT NULL DEFAULT NOW()\r\nexport class Comment{\r\n    constructor(id, body = [], userid, comments = [], postdate = ''){\r\n        Object.assign(this,{body:[],comments:[],likes:[]});\r\n        if(!body.length) Object.assign(this,id);\r\n        else Object.assign(this,{id, body, userid, comments, postdate});\r\n        this.body = Content.parse(this.body, this);\r\n        ['like','unlike','clickEdit','destroy','reply','toggleHide'].forEach(f=>this[f]=this[f].bind(this));\r\n        comments[this.id] = this;\r\n    }\r\n    static comments = {};\r\n    static get(id){\r\n        if(Comment.comments[id])return Comment.comments[id];\r\n        return fetch(`${api}/comments/${id}`)\r\n            .then(r=>r.json()).then(r=>new Comment(r[0]))\r\n    }\r\n    render(){\r\n        var _like = this.likes.find(l=>l.userid==corktaint.user.id);\r\n        // console.log(this.body,this.comments);\r\n        return <div className='comment-container' key={this.id}>\r\n                    <div className='hide-comment-wrapper'><Tooltip title={this.hide?'Show':'Hide'} placement='top'><span className='hide-comment-button link' onClick={this.toggleHide}>[{this.hide?'+':'-'}]</span></Tooltip></div>\r\n                    {this.hide?null:<>\r\n                        <Link className='comment-author' to={`/user/${this.userid}`}>{User.users[this.userid].name}</Link>\r\n                        {this.body.map((c,i)=>c.render(i))}\r\n                        {this.likes.length ? <span className='comment-like-count' onClick={_like?()=>this.unlike(_like):this.like}>{this.likes.length}<Tooltip title={_like?'Unlike':'Like'} placement='top'><span>❤️</span></Tooltip></span> : null}\r\n                        <div className='comment-options'>\r\n                            {[ !_like ? <span className='link' onClick={this.like}>Like</span> : <span className='link' onClick={()=>this.unlike(_like)}>Unlike</span>,\r\n                                <span className='link' onClick={()=>this.reply()}> Reply</span>,\r\n                                corktaint.user.id == this.userid || corktaint.user.admin ?\r\n                                    <><span className='link' onClick={this.clickEdit}> Edit</span> | <span className='link' onClick={this.destroy} > Delete</span></> : null\r\n                            ].filter(a=>a).reduce((a,c,i,arr)=>a.concat(c,i<arr.length-1?<> | </>:undefined),[])}\r\n                        </div>\r\n                        { corktaint.reply==this?<Reply value={this.replyMode=='reply'?null:Content.fullValues(this.body).join('\\n')}/>:null}\r\n                        <div className='comment-chain'>\r\n                            {this.comments.map((c)=>c.render())}\r\n                        </div>\r\n                    </>}\r\n            </div>\r\n    }\r\n    get desc(){return trim(Content.fullValues(this.body.slice(0,3)).join(''))}\r\n    toggleHide(){\r\n        this.hide = !this.hide;\r\n        corktaint.refresh();\r\n    }\r\n    unlike(like){\r\n        Like.deleteLike(like,this);\r\n        User.users[this.userid].changeScoreBy(-1);\r\n        this.changeScoreBy(-1);\r\n    }\r\n    like(){\r\n        Like.likeObj(this);\r\n        User.users[this.userid].changeScoreBy(1);\r\n        this.changeScoreBy(1);\r\n    }\r\n    reply(){\r\n        corktaint.reply=corktaint.reply!=this?this:null;\r\n        this.replyMode = 'reply';\r\n        corktaint.refresh();\r\n    }\r\n    async changeScoreBy(i=1){\r\n        return fetch(`${api}/comments/${this.id}`,{\r\n            method:'put',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({score:this.score+=i,lastaction:'now()',trend:increment(this.trend,i)})\r\n        });\r\n    }\r\n    clickEdit(){\r\n        corktaint.reply=corktaint.reply!=this?this:null;\r\n        this.replyMode = 'edit';\r\n        corktaint.refresh();\r\n    }\r\n    destroy(){\r\n        fetch(`${api}/comments/${this.id}`,{method:'delete'})\r\n            .then(r=>{\r\n                this.parent.comments.splice(this.parent.comments.indexOf(this),1);\r\n                corktaint.refresh();\r\n            });\r\n    }\r\n    edit(body){\r\n        return fetch(`${api}/comments/${this.id}`,{\r\n            method:'put',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({body})\r\n        }).then(()=>this.body = Content.parse(body))\r\n        .then(r=>{\r\n            corktaint.reply = null;\r\n            corktaint.refresh();\r\n        });\r\n    }\r\n    static from(a, i, set){\r\n        if(--i<0)return [];\r\n        let comments = a.map(b=>new Comment(b));\r\n        var promises = comments.map(c=>fetch(`${api}/comments/comments/${c.id}`)\r\n            .then(r=>r.json())\r\n            .then(r=>{\r\n                const [a,b]=Comment.from(r,i);\r\n                c.comments = a || [];\r\n                c.comments.forEach(cc=>{\r\n                    cc.parent=c;\r\n                    if(b)b.push(User.get(cc.userid));\r\n                });\r\n                if(b)return Promise.all(b);\r\n            })).concat(comments.map(c=>Like.getLikesFor(c)));\r\n        return [comments, promises]\r\n    }\r\n    static async addCommentTo(obj,body){\r\n        return fetch(`${api}/comments/${obj.constructor.name.toLowerCase()}s/${obj.id}`,{\r\n            method:'post',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({body,userid:corktaint.user.id})\r\n        }).then(r=>r.json()).then(r=>{\r\n            var c=new Comment(r[0]);\r\n            c.parent=obj;\r\n            return obj.comments.push(c);\r\n        }).then(r=>{\r\n            corktaint.reply = null;\r\n            corktaint.refresh();\r\n        });\r\n    }\r\n}\r\nexport class Like{\r\n    constructor(a){\r\n        Object.assign(this,a);\r\n    }\r\n    static getLikesFor(obj){\r\n        // console.log('atempting to get likes for',obj.constructor.name,' id',obj.id);\r\n        return fetch(`${api}/likes/${obj.constructor.name.toLowerCase()}s/${obj.id}`)\r\n            .then(r=>r.json())\r\n            .then(r=>obj.likes=r);\r\n    }\r\n    static likeObj(obj){\r\n        console.log('firing like on ',obj,obj.id);\r\n        debugger;\r\n        return fetch(`${api}/likes/${obj.constructor.name.toLowerCase()}s/${obj.id}`,{\r\n            method:'POST',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({userid:corktaint.user.id})\r\n        }).then(r=>r.json()).then(r=>{\r\n            obj.likes = obj.likes.concat(r);\r\n            corktaint.refresh();\r\n        });\r\n    }\r\n    static deleteLike(like,obj){\r\n        console.log('firing delete like on',obj,obj.id);\r\n        return fetch(`${api}/likes/${like.id}`,{method:'DELETE'})\r\n            .then(r=>{\r\n                obj.likes.splice(obj.likes.findIndex(a=>a.id==like.id),1);\r\n                corktaint.refresh();\r\n            })\r\n    }\r\n}\r\nexport class Content{\r\n    constructor(content, type = 'text', title, parent, fullValue){\r\n        Object.assign(this, {content, type, title, parent, fullValue});\r\n    }\r\n    render(i){\r\n        // console.log('content #'+this.id+' needs value');\r\n        switch(this.type){\r\n            case 'rating':return <Rating value={this.content} precision={0.1} readOnly={true} size='small' key={i}/>\r\n            case 'tags':return this.content.split(',').map((c,i)=><Chip key={i} label={c} variant='outlined' className='post-tag'/>)\r\n            case 'img':return <img className='content content-img' src={this.content} alt={this.title||''} key={i}/>\r\n            case 'text':default:return <p className='content content-text' key={i}>{this.content}</p>\r\n        }\r\n    }\r\n    static parse(val,parent){\r\n        if(Array.isArray(val))return val.map(a=>Content.parse(a,parent));\r\n        let match = (val.match(/(\\[(.*?)\\]\\((.*?)\\))/)||[]).slice(2);\r\n        if(match.length > 1)return new Content(match[1], match[0], match[0],parent,val);\r\n        else return new Content(val,'text','hi',parent,val);\r\n    }\r\n    static toBody(a){\r\n        return a.map(b=>b.content);\r\n    }\r\n    static fullValues(a){ return a.map(b=>b.fullValue)}\r\n}\r\nexport class Cookie{\r\n    static set(key, value, date){\r\n        document.cookie = `${key}=${value};expires=${date.toUTCString()}`;\r\n    }\r\n    static get(key){\r\n        let entry = document.cookie.split(';').find(c=>c.includes(key));\r\n        return entry?entry.split('=')[1]:null;\r\n    }\r\n    static delete(key){\r\n        document.cookie = `${key}=;expires=Thu, 01 Jan 1970 00:00:00 UTC;`;\r\n    }\r\n}\r\nexport const corktaint ={\r\n    refresh:()=>{\r\n        console.log('refreshing',corktaint.user,User.users);\r\n        corktaint.setPage(Post.render(corktaint.posts));\r\n    },\r\n    reply:null,\r\n    posts:[],\r\n    User,\r\n    Post\r\n};\r\nwindow.corktaint=corktaint;","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\index.js",[],"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\App.js",["80","81","82","83"],"import logo from './logo.svg';\nimport './App.css';\nimport {Switch, Route, BrowserRouter as Router} from 'react-router-dom';\nimport Home from './components/Home/Home';\nimport Login from './components/Login/Login';\nimport Navbar from './components/Navbar/Navbar';\nimport SingleUser from './components/SingleUser/SingleUser';\nimport { useState } from 'react';\n\n\nfunction App() {\n    const [user,setUser] = useState(null);\n  return !user?<Login setUser={setUser}/>:\n        <div className=\"App col\">\n            <Router>\n            <Navbar/>\n            <Home/>\n            </Router>\n        </div>\n}\n\nexport default App;","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Navbar\\Navbar.js",["84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100"],"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\SingleUser\\SingleUser.js",["101","102","103","104"],"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Login\\Login.js",[],"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Terms\\Terms.js",[],"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\NavbarModal\\NavbarModal.js",["105","106"],"import { useEffect, useState } from \"react\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport {PostAdd} from '@material-ui/icons';\r\nimport { corktaint } from \"../Helper\";\r\nimport './NavbarModal.css';\r\n\r\nconst types ={\r\n    messenger:{name:'Messenger',bottom:'10%'},\r\n    notifications:{name:'Notifications',bottom:'40%'},\r\n    account:{name:'Account',bottom:'40%'},\r\n    newPost:{name:'Create Post',bottom:'40%'},\r\n}\r\nexport default function NavbarModal(props){\r\n    const obj = types[props.type];\r\n    const [anim, setAnim] = useSpring(()=>({bottom:'100%'}));\r\n    const [reply, setReply] = useState(null);\r\n    const close = ()=> {\r\n        setAnim({bottom:'100%'});\r\n        window.setTimeout(()=>props.onClose(),500);\r\n    }\r\n    useEffect(()=>setAnim({bottom:obj.bottom}),[props.type])\r\n    return <animated.div className='navbar-modal-container col' style={anim}>\r\n        {props.close?close():null}\r\n        <div className='navbar-modal-header row' onClick={close}>\r\n            <h1>{obj.name}</h1><PostAdd className='new-message-button' onClick={()=>{setReply(corktaint.reply=obj)}} />\r\n        </div>\r\n        <div className=''>\r\n            \r\n        </div>\r\n    </animated.div>\r\n}","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\WineMap\\WineMap.js",[],"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Leaderboard\\Leaderboard.js",["107","108","109"],"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\NavbarModal\\Account.js",["110"],{"ruleId":"111","severity":1,"message":"112","line":4,"column":16,"nodeType":"113","messageId":"114","endLine":4,"endColumn":20},{"ruleId":"111","severity":1,"message":"115","line":6,"column":30,"nodeType":"113","messageId":"114","endLine":6,"endColumn":36},{"ruleId":"111","severity":1,"message":"116","line":8,"column":41,"nodeType":"113","messageId":"114","endLine":8,"endColumn":47},{"ruleId":"111","severity":1,"message":"117","line":37,"column":12,"nodeType":"113","messageId":"114","endLine":37,"endColumn":16},{"ruleId":"111","severity":1,"message":"118","line":37,"column":18,"nodeType":"113","messageId":"114","endLine":37,"endColumn":25},{"ruleId":"119","severity":1,"message":"120","line":78,"column":34,"nodeType":"121","messageId":"122","endLine":78,"endColumn":36},{"ruleId":"123","severity":1,"message":"124","line":5,"column":1,"nodeType":"125","endLine":36,"endColumn":2},{"ruleId":"119","severity":1,"message":"126","line":24,"column":54,"nodeType":"121","messageId":"122","endLine":24,"endColumn":56},{"ruleId":"111","severity":1,"message":"127","line":1,"column":18,"nodeType":"113","messageId":"114","endLine":1,"endColumn":24},{"ruleId":"111","severity":1,"message":"128","line":7,"column":10,"nodeType":"113","messageId":"114","endLine":7,"endColumn":19},{"ruleId":"119","severity":1,"message":"120","line":57,"column":48,"nodeType":"121","messageId":"122","endLine":57,"endColumn":50},{"ruleId":"119","severity":1,"message":"120","line":58,"column":33,"nodeType":"121","messageId":"122","endLine":58,"endColumn":35},{"ruleId":"119","severity":1,"message":"126","line":66,"column":41,"nodeType":"121","messageId":"122","endLine":66,"endColumn":43},{"ruleId":"119","severity":1,"message":"120","line":74,"column":41,"nodeType":"121","messageId":"122","endLine":74,"endColumn":43},{"ruleId":"119","severity":1,"message":"120","line":213,"column":48,"nodeType":"121","messageId":"122","endLine":213,"endColumn":50},{"ruleId":"119","severity":1,"message":"120","line":224,"column":51,"nodeType":"121","messageId":"122","endLine":224,"endColumn":53},{"ruleId":"119","severity":1,"message":"120","line":228,"column":42,"nodeType":"121","messageId":"122","endLine":228,"endColumn":44},{"ruleId":"119","severity":1,"message":"120","line":228,"column":77,"nodeType":"121","messageId":"122","endLine":228,"endColumn":79},{"ruleId":"119","severity":1,"message":"126","line":251,"column":40,"nodeType":"121","messageId":"122","endLine":251,"endColumn":42},{"ruleId":"119","severity":1,"message":"126","line":263,"column":40,"nodeType":"121","messageId":"122","endLine":263,"endColumn":42},{"ruleId":"119","severity":1,"message":"120","line":342,"column":61,"nodeType":"121","messageId":"122","endLine":342,"endColumn":63},{"ruleId":"111","severity":1,"message":"129","line":1,"column":8,"nodeType":"113","messageId":"114","endLine":1,"endColumn":12},{"ruleId":"111","severity":1,"message":"130","line":3,"column":9,"nodeType":"113","messageId":"114","endLine":3,"endColumn":15},{"ruleId":"111","severity":1,"message":"131","line":3,"column":17,"nodeType":"113","messageId":"114","endLine":3,"endColumn":22},{"ruleId":"111","severity":1,"message":"132","line":7,"column":8,"nodeType":"113","messageId":"114","endLine":7,"endColumn":18},{"ruleId":"111","severity":1,"message":"133","line":5,"column":10,"nodeType":"113","messageId":"114","endLine":5,"endColumn":16},{"ruleId":"111","severity":1,"message":"134","line":7,"column":10,"nodeType":"113","messageId":"114","endLine":7,"endColumn":14},{"ruleId":"111","severity":1,"message":"135","line":9,"column":9,"nodeType":"113","messageId":"114","endLine":9,"endColumn":16},{"ruleId":"123","severity":1,"message":"124","line":12,"column":1,"nodeType":"125","endLine":40,"endColumn":2},{"ruleId":"111","severity":1,"message":"118","line":13,"column":18,"nodeType":"113","messageId":"114","endLine":13,"endColumn":25},{"ruleId":"119","severity":1,"message":"120","line":16,"column":34,"nodeType":"121","messageId":"122","endLine":16,"endColumn":36},{"ruleId":"119","severity":1,"message":"120","line":17,"column":36,"nodeType":"121","messageId":"122","endLine":17,"endColumn":38},{"ruleId":"119","severity":1,"message":"120","line":18,"column":40,"nodeType":"121","messageId":"122","endLine":18,"endColumn":42},{"ruleId":"119","severity":1,"message":"120","line":19,"column":34,"nodeType":"121","messageId":"122","endLine":19,"endColumn":36},{"ruleId":"119","severity":1,"message":"120","line":24,"column":89,"nodeType":"121","messageId":"122","endLine":24,"endColumn":91},{"ruleId":"119","severity":1,"message":"120","line":25,"column":97,"nodeType":"121","messageId":"122","endLine":25,"endColumn":99},{"ruleId":"119","severity":1,"message":"120","line":26,"column":97,"nodeType":"121","messageId":"122","endLine":26,"endColumn":99},{"ruleId":"119","severity":1,"message":"120","line":27,"column":102,"nodeType":"121","messageId":"122","endLine":27,"endColumn":104},{"ruleId":"136","severity":1,"message":"137","line":32,"column":43,"nodeType":"138","endLine":32,"endColumn":64},{"ruleId":"136","severity":1,"message":"137","line":33,"column":42,"nodeType":"138","endLine":33,"endColumn":66},{"ruleId":"136","severity":1,"message":"137","line":34,"column":48,"nodeType":"138","endLine":34,"endColumn":75},{"ruleId":"136","severity":1,"message":"137","line":35,"column":42,"nodeType":"138","endLine":35,"endColumn":63},{"ruleId":"111","severity":1,"message":"139","line":4,"column":14,"nodeType":"113","messageId":"114","endLine":4,"endColumn":23},{"ruleId":"111","severity":1,"message":"140","line":11,"column":18,"nodeType":"113","messageId":"114","endLine":11,"endColumn":25},{"ruleId":"141","severity":1,"message":"142","line":25,"column":7,"nodeType":"143","endLine":25,"endColumn":9,"suggestions":"144"},{"ruleId":"141","severity":1,"message":"145","line":35,"column":7,"nodeType":"143","endLine":35,"endColumn":29,"suggestions":"146"},{"ruleId":"111","severity":1,"message":"147","line":16,"column":12,"nodeType":"113","messageId":"114","endLine":16,"endColumn":17},{"ruleId":"141","severity":1,"message":"148","line":21,"column":48,"nodeType":"143","endLine":21,"endColumn":60,"suggestions":"149"},{"ruleId":"111","severity":1,"message":"140","line":9,"column":18,"nodeType":"113","messageId":"114","endLine":9,"endColumn":25},{"ruleId":"119","severity":1,"message":"126","line":36,"column":53,"nodeType":"121","messageId":"122","endLine":36,"endColumn":55},{"ruleId":"141","severity":1,"message":"150","line":42,"column":6,"nodeType":"143","endLine":42,"endColumn":23,"suggestions":"151"},{"ruleId":"111","severity":1,"message":"133","line":1,"column":10,"nodeType":"113","messageId":"114","endLine":1,"endColumn":16},"no-unused-vars","'User' is defined but never used.","Identifier","unusedVar","'config' is defined but never used.","'Router' is defined but never used.","'view' is assigned a value but never used.","'setView' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Expected '!==' and instead saw '!='.","'Button' is defined but never used.","'useSpring' is defined but never used.","'logo' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'SingleUser' is defined but never used.","'Avatar' is defined but never used.","'Link' is defined but never used.","'newPost' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'corktaint' is defined but never used.","'setPage' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["152"],"React Hook useEffect has a missing dependency: 'classes'. Either include it or remove the dependency array.",["153"],"'reply' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'obj.bottom' and 'setAnim'. Either include them or remove the dependency array.",["154"],"React Hook useEffect has missing dependencies: 'classes' and 'cols'. Either include them or remove the dependency array.",["155"],{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},"Update the dependencies array to be: [id]",{"range":"164","text":"165"},"Update the dependencies array to be: [type, trend, page, user, classes]",{"range":"166","text":"167"},"Update the dependencies array to be: [obj.bottom, props.type, setAnim]",{"range":"168","text":"169"},"Update the dependencies array to be: [type, trend, page, classes, cols]",{"range":"170","text":"171"},[947,949],"[id]",[1324,1346],"[type, trend, page, user, classes]",[789,801],"[obj.bottom, props.type, setAnim]",[1641,1658],"[type, trend, page, classes, cols]"]
[{"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\reportWebVitals.js":"1","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\App.js":"2","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Navbar\\Navbar.js":"3","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Home\\Home.js":"4","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Helper.js":"5","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\index.js":"6"},{"size":362,"mtime":1606236316379,"results":"7","hashOfConfig":"8"},{"size":697,"mtime":1606242449513,"results":"9","hashOfConfig":"8"},{"size":152,"mtime":1606245376282,"results":"10","hashOfConfig":"8"},{"size":1461,"mtime":1606372302303,"results":"11","hashOfConfig":"8"},{"size":6113,"mtime":1606403456760,"results":"12","hashOfConfig":"8"},{"size":500,"mtime":1606236316379,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lao15b",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\reportWebVitals.js",[],"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\App.js",["28"],"import logo from './logo.svg';\nimport './App.css';\nimport {Switch, Route, BrowserRouter as Router} from 'react-router-dom';\nimport Home from './components/Home/Home';\nimport Navbar from './components/Navbar/Navbar';\n\n\nfunction App() {\n  return (\n      <Router>\n        <div className=\"App col\">\n            <Navbar />\n            <Switch>\n                <Route path=\"/about\">\n                {/* <About /> */}\n                </Route>\n                <Route path=\"/users\">\n                {/* <Users /> */}\n                </Route>\n                <Route path=\"/\">\n                <Home />\n                </Route>\n            </Switch>\n        </div>\n      </Router>\n  );\n}\n\nexport default App;\n","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Navbar\\Navbar.js",["29"],"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Home\\Home.js",["30","31"],"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Helper.js",["32"],"export const api = 'http://localhost:2999'\r\n// CREATE TABLE users (\r\n//     id serial primary key,\r\n//     name VARCHAR(32),\r\n//     email VARCHAR(64),\r\n//     last_login timestamp NOT NULL DEFAULT NOW(),\r\n//     achievements VARCHAR(64)[],\r\n//     score integer DEFAULT 0\r\n//   );\r\nexport class User{\r\n    constructor(id, name, email, achievements, score){\r\n        if(!name) Object.assign(this,id);\r\n        else Object.assign(this, {id, name, email, achievements, score});\r\n    }\r\n    static users = [];\r\n    static from(a){\r\n        return a.map(b=>new User(b));\r\n    }\r\n}\r\n// id serial primary key,\r\n// postType VARCHAR(32),\r\n// broadcast varchar(32) default 'Public',\r\n// body text[],\r\n// title varchar(80),\r\n// postDate timestamp NOT NULL DEFAULT NOW(),\r\n// userId int NOT NULL,\r\n// FOREIGN KEY(userId) REFERENCES users(id) ON DELETE CASCADE\r\nexport class Post{\r\n    constructor(id,userId,title,body = [], comments=[],postDate){\r\n        if(!userId) Object.assign(this,{comments:[],body:[]},id);\r\n        else Object.assign(this,{comments:[],body:[]},{id, userId,title,comments,body,postDate});\r\n        this.body = Content.parse(this.body);\r\n        // console.log(arguments);\r\n        Post.posts[id] = this;\r\n    }\r\n    static posts = [];\r\n    render(I){\r\n        console.log('individual post #',this.id,' with ',this.comments.length,'comments');\r\n        return (\r\n            <div className='content-post col' key={I}>\r\n                {this.body.map((c,i)=>c.render(i))}\r\n                <div className='post-comments'>\r\n                    {this.comments.length?\r\n                        this.comments.map((c,i)=>c.render(i)):\r\n                        <p>No Comments Yet...{this.comments.length}</p>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    static render(posts){\r\n        console.log('starting to get value');\r\n        return (\r\n            <div className='content-posts row wrap'>\r\n                {posts.map((p,i)=>p.render(i))}\r\n            </div>\r\n        )\r\n    }\r\n    static createPostFrom(userid,title,body){\r\n        // console.log('creating post at',Post.posts.length, title, body);\r\n        return new Post(Post.posts.length, userid, title, [...body.replace(/\\n\\s*\\n/g, '\\n').split('\\n')].map(x=>Content.parse(x)));\r\n    }\r\n    static async from(a,set){\r\n        let posts = a.map(b=>new Post(b));\r\n        var promises = posts.map(p=>fetch(`${api}/comments/posts/${p.id}`)\r\n            .then(r=>r.json())\r\n            .then(r=>{\r\n                const [a,b] = Comment.from(r,5,set);\r\n                p.comments = a;\r\n                return Promise.all(b);\r\n            }\r\n        ));\r\n        do{\r\n            promises = (await Promise.all(promises)).filter(p=>p.then);\r\n        }while(promises.length);\r\n        //await Promise.all(promises);\r\n        set(posts);\r\n        console.log('finished',posts);\r\n    }\r\n}\r\n// id serial primary key,\r\n// broadcast varchar(32) default 'Public',\r\n// body text[],\r\n// userId int NOT NULL,\r\n// FOREIGN KEY(userId) REFERENCES users(id) ON DELETE CASCADE,\r\n// postDate timestamp NOT NULL DEFAULT NOW()\r\nexport class Comment{\r\n    constructor(id, body = [], userId, comments = [], postDate = ''){\r\n        if(!body.length) Object.assign(this,{body:[],comments:[]},id);\r\n        else Object.assign(this,{body:[],comments:[]}, {id, body, userId, comments, postDate});\r\n        this.body = Content.parse(this.body, this);\r\n    }\r\n    render(I){\r\n        console.log('attempting to render comment ',this.id,this.body);\r\n        return [\r\n            <div className='comment-container' key={I}>\r\n                {this.body.map((c,i)=>c.render(i))}\r\n                <div className='comment-chain'>\r\n                    {this.comments.map((c,i)=>c.render(i))}\r\n                </div>\r\n            </div>\r\n        ]\r\n    }\r\n    static from(a, i, set){\r\n        if(--i<0)return [];\r\n        let comments = a.map(b=>new Comment(b));\r\n        var promises = comments.map(c=>fetch(`${api}/comments/comments/${c.id}`)\r\n            .then(r=>r.json())\r\n            .then(r=>{\r\n                console.log('loaded a comment at level ',i)\r\n                const [a,b]=Comment.from(r,i);\r\n                c.comments = a;\r\n                if(b)return Promise.all(b);\r\n            }));\r\n        return [comments, promises]\r\n    }\r\n}\r\nexport class Content{\r\n    constructor(content, type = 'text', title, parent){\r\n        Object.assign(this, {content, type, title, parent});\r\n    }\r\n    render(i){\r\n        // console.log('content #'+this.id+' needs value');\r\n        return this.type == 'text' ?\r\n            (<p className='content content-text' key={i}>{this.content}</p>):\r\n            (<img className='content content-img' src={this.content} alt={this.title||''} key={i}/>)\r\n    }\r\n    static parse(val,parent){\r\n        if(Array.isArray(val))return val.map(a=>Content.parse(a,parent));\r\n        let match = val.match(/(\\[(.*?)\\]\\((.*?)\\))/);\r\n        // console.log('found match',match);\r\n        if(match && match.length > 1)return new Content(match[3], 'img', match[4],parent);\r\n        else return new Content(val,'text','hi',parent);\r\n    }\r\n\r\n}\r\n\r\n/*export const abe = new User(0,'Abe Johnson');\r\n\r\nexport const firstPost = new Post(Post.posts.length, abe,'This is my first post',[new Content('Here is my first content post'),new Content('It is filled with information'),new Content('https://s3-cdn.withwine.com/Wine/zrLjkNQrhk2dPco2FplGNg.png?h=256&autorotate=true','img','wine'), new Content('Ex Dee')]);\r\nexport const p2 = new Post(Post.posts.length, abe,'This is my second post',[new Content('Here is my first content post'),new Content('It is filled with information'),new Content('https://s3-cdn.withwine.com/Wine/zrLjkNQrhk2dPco2FplGNg.png?h=256&autorotate=true','img','wine'), new Content('Ex Dee')]);\r\nexport const p3 = new Post(Post.posts.length, abe,'This is my third post',[new Content('Here is my first content post'),new Content('It is filled with information'),new Content('https://s3-cdn.withwine.com/Wine/zrLjkNQrhk2dPco2FplGNg.png?h=256&autorotate=true','img','wine'), new Content('Ex Dee')]);\r\n*/","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\index.js",[],{"ruleId":"33","severity":1,"message":"34","line":1,"column":8,"nodeType":"35","messageId":"36","endLine":1,"endColumn":12},{"ruleId":"37","severity":1,"message":"38","line":1,"column":1,"nodeType":"39","endLine":7,"endColumn":2},{"ruleId":"37","severity":1,"message":"38","line":6,"column":1,"nodeType":"39","endLine":41,"endColumn":2},{"ruleId":"33","severity":1,"message":"40","line":7,"column":12,"nodeType":"35","messageId":"36","endLine":7,"endColumn":17},{"ruleId":"41","severity":1,"message":"42","line":125,"column":26,"nodeType":"43","messageId":"44","endLine":125,"endColumn":28},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'users' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]
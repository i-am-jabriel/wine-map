[{"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Home\\Home.js":"1","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Reply\\Reply.js":"2","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Helper.js":"3","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\index.js":"4","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\App.js":"5","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Navbar\\Navbar.js":"6","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\SingleUser\\SingleUser.js":"7","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Login\\Login.js":"8","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Terms\\Terms.js":"9","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\NavbarModal\\NavbarModal.js":"10","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\WineMap\\WineMap.js":"11"},{"size":4082,"mtime":1607106196074,"results":"12","hashOfConfig":"13"},{"size":1800,"mtime":1606747250803,"results":"14","hashOfConfig":"13"},{"size":13725,"mtime":1607098333299,"results":"15","hashOfConfig":"13"},{"size":500,"mtime":1606236316379,"results":"16","hashOfConfig":"13"},{"size":618,"mtime":1607106277783,"results":"17","hashOfConfig":"13"},{"size":2242,"mtime":1607107370656,"results":"18","hashOfConfig":"13"},{"size":71,"mtime":1606713467564,"results":"19","hashOfConfig":"13"},{"size":1978,"mtime":1606834490116,"results":"20","hashOfConfig":"13"},{"size":512,"mtime":1607018808883,"results":"21","hashOfConfig":"13"},{"size":1044,"mtime":1607013096612,"results":"22","hashOfConfig":"13"},{"size":735,"mtime":1607104661138,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},"lao15b",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Home\\Home.js",["52","53","54","55","56","57"],"import {Fab, Tooltip} from \"@material-ui/core\";\r\nimport { Edit, Add, Image, Map } from \"@material-ui/icons\"\r\nimport { useEffect, useState } from \"react\";\r\nimport { Post, User, api, corktaint } from \"../Helper\";\r\nimport Reply from '../Reply/Reply';\r\nimport {useSpring, animated, config} from 'react-spring';\r\nimport WineMap from '../WineMap/WineMap';\r\nimport {Switch, Route, BrowserRouter as Router} from 'react-router-dom';\r\n\r\nconst home = {name:'Home',isPost:true};\r\nexport function newPost(){\r\n    corktaint.reply = home;\r\n    corktaint.refresh();\r\n}\r\nexport default function Home(props){\r\n    const button ={\r\n        length:120,\r\n        to:{bottom:0,left:150,opacity:1},\r\n        from:{bottom:60,left:0,opacity:0,pointerEvents:'none'},\r\n        config:{duration:5000},\r\n        count:4,\r\n        getTo:function(i){\r\n            return {\r\n                opacity:1,\r\n                left:this.length * Math.cos(Math.PI * i / this.count),\r\n                bottom:this.length * Math.sin(Math.PI * i / this.count) + 60,\r\n                pointerEvents:'all'\r\n            }\r\n        }\r\n    }\r\n    const [newPostButton, setNewPostButton] = useSpring(()=>button.from);\r\n    const [newImageButton, setNewImageButton] = useSpring(()=>button.from);\r\n    const [newMapButton, setNewMapButton] = useSpring(()=>button.from);\r\n    const [moreButtons, setMoreButtons] = useState(false);\r\n    const {view, setView} = props;\r\n    let [page, setPage] = useState(<></>);\r\n    useEffect(()=>{\r\n        // fetch(`${api}/users`)\r\n        // .then(r=>r.json())\r\n        // .then(r=>User.from(r))\r\n        // .then(r=>{\r\n        //     setUsers(r)\r\n        //     setUser(r[0]);\r\n        //     return true;\r\n        // })\r\n        // .then(r=>\r\n        fetch(`${api}/user/1/feed`)\r\n        .then(r=>r.json())\r\n        .then(r=>Post.from(r))\r\n    },[]);\r\n    useEffect(()=>{\r\n        Object.assign(corktaint,{setPage}); \r\n    },[page]);\r\n    \r\n    const showButtons = () =>{\r\n        setMoreButtons(true);\r\n        setNewPostButton(button.getTo(2));\r\n        setNewImageButton(button.getTo(1));\r\n        setNewMapButton(button.getTo(3));\r\n    }\r\n    const hideButtons = () => {\r\n        setMoreButtons(false);\r\n        setNewPostButton(button.from);\r\n        setNewImageButton(button.from);\r\n        setNewMapButton(button.from);\r\n    }\r\n    console.log('about to render page');\r\n    const showPost = () =>{\r\n        corktaint.reply=home;\r\n        corktaint.refresh();\r\n    }\r\n    return (\r\n        <div className='home main-container col' name='New Post'>\r\n            <Switch>\r\n                <Route exact path='/'>\r\n                 {corktaint.reply==home ? <div className='reply-wrapper'><Reply/></div>:\r\n                    <><div className='main-button-hover' onMouseLeave={hideButtons}><div className='main-button'>\r\n                        <Fab color=\"primary\" aria-label=\"add\" onClick={moreButtons?showPost:showButtons} onMouseEnter={showButtons}>\r\n                            <Add />\r\n                        </Fab>\r\n                        {moreButtons ? ' ':'.'}\r\n                        {/* {moreButtons? */}\r\n                            <Tooltip title='New Post' placement='top'><animated.div className={`hover-button ${moreButtons?'':'disabled'}`} style={newPostButton}><Fab color='secondary' onClick={showPost} ><Edit/></Fab></animated.div></Tooltip>\r\n                            <Tooltip title='Upload Gallery' placement='top'><animated.div className={`hover-button ${moreButtons?'':'disabled'}`} style={newImageButton}><Fab color='secondary' onClick={showPost} ><Image/></Fab></animated.div></Tooltip>\r\n                            <Tooltip title='Submit Review' placement='top'><animated.div className={`hover-button ${moreButtons?'':'disabled'}`} style={newMapButton}><Fab color='secondary' onClick={showPost} ><Map/></Fab></animated.div></Tooltip>\r\n                            {/* :null} */}\r\n                    </div></div>\r\n                    {page}</>}\r\n            </Route>\r\n            <Route path='/map'> <WineMap/> </Route>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Reply\\Reply.js",["58","59"],"import { Button } from \"@material-ui/core\"\r\nimport { useState } from \"react\"\r\nimport { parseBody, Comment, Content, Post, corktaint } from \"../Helper\"\r\n\r\nexport default props => {\r\n    const [value, setValue] = useState(props.value || '');\r\n    const [title, setTitle] = useState(props.value || '')\r\n    return (\r\n        <div className='reply-container col'>\r\n            {corktaint.reply.isPost?\r\n                <input value={title} onInput={e=>setTitle(e.target.value)} className='post-title-input' placeholder='Title'/>:null}\r\n            <div className='reply-content row'>\r\n                <textarea id='reply' onInput={e=>setValue(e.target.value)} defaultValue={value}/>\r\n                <div className='reply-preview'>\r\n                    <h3 className='preview-title'>Preview:</h3>\r\n                    <div className='preview-contents'>{parseBody(value).map((c,i)=>c.render(i))}</div>\r\n                </div>\r\n            </div>\r\n            <div className='reply-buttons row'>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={()=>{\r\n                    if(corktaint.reply.isPost)\r\n                        Post.submitNewPost(title,Content.fullValues(parseBody(value)));\r\n                    else\r\n                        if(corktaint.reply.replyMode != 'edit')\r\n                            Comment.addCommentTo(corktaint.reply, Content.fullValues(parseBody(value)));\r\n                        else\r\n                            corktaint.reply.edit(Content.fullValues(parseBody(value)))\r\n                }}>Submit</Button>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={()=>{\r\n                    corktaint.reply = null;\r\n                    corktaint.refresh();\r\n                }}>Cancel</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Helper.js",["60","61","62","63","64","65","66","67","68","69","70","71"],"import { Button, Fab, Tooltip } from \"@material-ui/core\";\r\nimport { Add, Close } from \"@material-ui/icons\"\r\nimport Reply from \"./Reply/Reply\";\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nexport const api = 'http://localhost:2999';\r\n// export const sqlDateToJavascript = n => new Date(Date.UTC(...n.split(/[- :]/))).toString();\r\nexport const sqlDateToJavascript = n =>{\r\n    let d = new Date(n);\r\n    return `${d.toLocaleDateString()} ${d.toLocaleTimeString()}`;\r\n}\r\nexport const parseBody = body =>\r\n    [...body.replace(/\\n\\s*\\n/g, '\\n').split('\\n')].map(x=>Content.parse(x));\r\nexport const increment = (o,i=1) => {Object.keys(o).forEach(k=>o[k]=(o[k]||0)+i);return o}\r\nexport class User{  \r\n    constructor(id, name, email, achievements, score){\r\n        if(!name) Object.assign(this,id);\r\n        else Object.assign(this, {id, name, email, achievements, score});\r\n        User.users[`${this.id}`] = this;\r\n        console.log('created new user',this.name,this.id);\r\n    }\r\n    static users = {};\r\n    static from(a){\r\n        return a.map(b=>new User(b));\r\n    }\r\n    static getUser(id){\r\n        console.log('attempting to get user at',id,User.users[id]);\r\n        if(User.users[id])return User.users[id];\r\n        console.log('downloading user')\r\n        return fetch(`${api}/users/${id}`)\r\n            .then(r=>r.json()).then(r=>new User(r[0]))\r\n    }\r\n    async changeScoreBy(i=1){\r\n        return fetch(`${api}/users/${this.id}`,{\r\n            method:'put',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({score:this.score+=i,lastaction:'now()',trend:increment(this.trend,i)})\r\n        });\r\n    }\r\n}\r\n\r\nexport class Post{\r\n    constructor(id,userId,title,body = [], comments=[],postDate){\r\n        Object.assign(this,{comments:[],body:[],likes:[]});\r\n        if(!userId) Object.assign(this,id);\r\n        else Object.assign(this,{id, userId,title,comments,body,postDate});\r\n        this.body = Content.parse(this.body);\r\n        // console.log(arguments);\r\n        Post.posts[`${this.id}`] = this;\r\n        ['like','unlike','destroy','clickEdit'].forEach(m=>this[m]=this[m].bind(this));\r\n    }\r\n    static posts = {};\r\n    render(){\r\n        var _like = this.likes.find(l=>l.userid==corktaint.user.id);\r\n        var admin = this.userid == corktaint.user.id || corktaint.user.admin;\r\n        //console.log('individual post #',this.id,' with ',this.comments.length,'comments','is replying?',corktaint.reply==this);\r\n        return (\r\n            <div className='content-post col' key={this.id}>\r\n                {admin ? <p className='delete-post-button' onClick={this}> <Close/> </p>: null}\r\n                <div className='col post-container'>\r\n                    {corktaint.reply!=this?this.body.map((c,i)=>c.render(i)):<Reply value={Content.fullValues(this.body).join('\\n')}/>}\r\n                </div>\r\n                {admin?<p className='post-edit' onClick={this.clickEdit}>Edit</p>:null}\r\n                <div className='post-credit'>\r\n                    <p>- {User.users[this.userid].name}</p><p>{sqlDateToJavascript(this.postdate)}</p>\r\n                    </div>\r\n                <div className='post-like-count' >\r\n                    <span onClick={()=>!_like?this.like():this.unlike(_like)}>{this.likes.length} {_like?<>❤️</>:<>♡</>}</span>\r\n                    {corktaint.reply==this?<Reply/>:\r\n                    <span className='row post-reply-button'><Tooltip title='Reply' placement='top'><Fab color='primary' onClick={()=>{corktaint.reply=this;corktaint.refresh()}}>\r\n                        <Add/>\r\n                    </Fab></Tooltip></span>\r\n                    }\r\n                </div>\r\n                <div className='post-comments'>\r\n                    {this.comments.length?\r\n                        this.comments.map((c,i)=>c.render(i)):\r\n                        <p>No Comments Yet...</p>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    like(){\r\n        Like.likeObj(this); \r\n        User.users[this.userid].changeScoreBy(1);\r\n    }\r\n    unlike(like){\r\n        Like.deleteLike(like,this);\r\n        User.users[this.userid].changeScoreBy(-1);\r\n    }\r\n    clickEdit(){\r\n        this.replyMode = 'edit';\r\n        corktaint.reply=this;\r\n        corktaint.refresh();\r\n    }\r\n    static render(posts){\r\n        //corktaint.setPosts(posts);\r\n        corktaint.posts = posts;\r\n        return (\r\n            <div className='content-posts col wrap'>\r\n                {posts.map(p=>p.render())}\r\n            </div>\r\n        )\r\n    }\r\n    static createPostFrom(userid,title,body){\r\n        // console.log('creating post at',Post.posts.length, title, body);\r\n        return new Post(Post.posts.length, userid, title, parseBody(body));\r\n    }\r\n    destroy(){\r\n        fetch(`${api}/posts/${this.id}`,{method:'delete'})\r\n            .then(r=>{\r\n                corktaint.posts.splice(this.id,1);\r\n                corktaint.refresh();\r\n            });\r\n    }\r\n    edit(body){\r\n        return fetch(`${api}/comments/${this.id}`,{\r\n            method:'put',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({body})\r\n        }).then(()=>this.body = Content.parse(body))\r\n        .then(r=>{\r\n            corktaint.reply = null;\r\n            corktaint.refresh();\r\n        });\r\n    }\r\n    static submitNewPost(title,body){\r\n        return fetch(`${api}/posts`,{\r\n            method:'post',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({userid:corktaint.user.id,body,title}),\r\n        }).then(r=>r.json()).then(r=>{\r\n            corktaint.posts.push(new Post(r[0]));\r\n            // console.log(corktaint.posts[corktaint.posts.length-1]);\r\n            corktaint.reply = null;\r\n            corktaint.refresh();\r\n        })\r\n    }\r\n    getComments(){\r\n        if(this.commentsLoaded)return;\r\n        return fetch(`${api}/comments/posts/${this.id}`)\r\n            .then(r=>r.json())\r\n            .then(r=>{\r\n                const [a,b] = Comment.from(r,5);\r\n                this.comments = a;\r\n                a.forEach(aa=>aa.parent = this);\r\n                this.commentsLoaded=true;\r\n                return Promise.all(b);\r\n            }\r\n        );\r\n    }\r\n    static async from(a){\r\n        let posts = a.map(b=>Post.posts[b.id]||new Post(b));\r\n        var promises = posts.map(p=>p.getComments()).concat(posts.map(p=>Like.getLikesFor(p))).concat(posts.map(p=>User.getUser(p.userid)));\r\n        do{\r\n            promises = (await Promise.all(promises)).filter(p=>p&&p.then);\r\n        }\r\n        while(promises.length);\r\n        console.log('finished promises',posts,corktaint,User.users);\r\n        corktaint.posts=posts;\r\n        corktaint.refresh();\r\n    }\r\n}\r\n// id serial primary key,\r\n// broadcast varchar(32) default 'Public',\r\n// body text[],\r\n// userId int NOT NULL,\r\n// FOREIGN KEY(userId) REFERENCES users(id) ON DELETE CASCADE,\r\n// postDate timestamp NOT NULL DEFAULT NOW()\r\nexport class Comment{\r\n    constructor(id, body = [], userid, comments = [], postdate = ''){\r\n        Object.assign(this,{body:[],comments:[],likes:[]});\r\n        if(!body.length) Object.assign(this,id);\r\n        else Object.assign(this,{id, body, userid, comments, postdate});\r\n        this.body = Content.parse(this.body, this);\r\n        ['like','unlike','clickEdit','destroy','reply'].forEach(f=>this[f]=this[f].bind(this));\r\n    }\r\n    render(){\r\n        var _like = this.likes.find(l=>l.userid==corktaint.user.id);\r\n        // console.log(this.body,this.comments);\r\n        return [\r\n            <div className='comment-container' key={this.id}>\r\n                {this.body.map((c,i)=>c.render(i))}\r\n                {this.likes.length ? <p className='comment-like-count' onClick={_like?()=>this.unlike(_like):this.like}>{this.likes.length} ❤️</p> : null}\r\n                <div className='comment-options'>\r\n                    { !_like ?\r\n                        <><span onClick={this.like}>Like</span> | </>:\r\n                        <><span onClick={()=>this.unlike(_like)}>Unlike</span> | </>\r\n                    }\r\n                    <span onClick={()=>this.reply()}> Reply</span> |\r\n                    { corktaint.user.id == this.userid || corktaint.user.admin ?\r\n                        <>\r\n                            <span onClick={this.clickEdit}> Edit</span> | \r\n                            <span onClick={this.destroy} > Delete</span>\r\n                        </>:null\r\n                    }    \r\n                </div>\r\n                { corktaint.reply==this?<Reply value={this.replyMode=='reply'?null:Content.fullValues(this.body).join('\\n')}/>:null}\r\n                <div className='comment-chain'>\r\n                    {this.comments.map((c)=>c.render())}\r\n                </div>\r\n            </div>\r\n        ]\r\n    }\r\n    unlike(like){\r\n        Like.deleteLike(like,this);\r\n        User.users[this.userid].changeScoreBy(-1);\r\n    }\r\n    like(){\r\n        Like.likeObj(this);\r\n        User.users[this.userid].changeScoreBy(1);\r\n    }\r\n    reply(){\r\n        corktaint.reply=corktaint.reply!=this?this:null;\r\n        this.replyMode = 'reply';\r\n        corktaint.refresh();\r\n    }\r\n    clickEdit(){\r\n        corktaint.reply=corktaint.reply!=this?this:null;\r\n        this.replyMode = 'edit';\r\n        corktaint.refresh();\r\n    }\r\n    destroy(){\r\n        fetch(`${api}/comments/${this.id}`,{method:'delete'})\r\n            .then(r=>{\r\n                this.parent.comments.splice(this.parent.comments.indexOf(this),1);\r\n                corktaint.refresh();\r\n            });\r\n    }\r\n    edit(body){\r\n        return fetch(`${api}/comments/${this.id}`,{\r\n            method:'put',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({body})\r\n        }).then(()=>this.body = Content.parse(body))\r\n        .then(r=>{\r\n            corktaint.reply = null;\r\n            corktaint.refresh();\r\n        });\r\n    }\r\n    static from(a, i, set){\r\n        if(--i<0)return [];\r\n        let comments = a.map(b=>new Comment(b));\r\n        var promises = comments.map(c=>fetch(`${api}/comments/comments/${c.id}`)\r\n            .then(r=>r.json())\r\n            .then(r=>{\r\n                const [a,b]=Comment.from(r,i);\r\n                c.comments = a || [];\r\n                c.comments.forEach(cc=>cc.parent=c);\r\n                if(b)return Promise.all(b);\r\n            })).concat(comments.map(c=>Like.getLikesFor(c)));\r\n        return [comments, promises]\r\n    }\r\n    static async addCommentTo(obj,body){\r\n        return fetch(`${api}/comments/${obj.constructor.name.toLowerCase()}s/${obj.id}`,{\r\n            method:'post',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({body,userid:corktaint.user.id})\r\n        }).then(r=>r.json()).then(r=>{\r\n            var c=new Comment(r[0]);\r\n            c.parent=obj;\r\n            return obj.comments.push(c);\r\n        }).then(r=>{\r\n            corktaint.reply = null;\r\n            corktaint.refresh();\r\n        });\r\n    }\r\n}\r\nexport class Like{\r\n    constructor(a){\r\n        Object.assign(this,a);\r\n    }\r\n    static getLikesFor(obj){\r\n        // console.log('atempting to get likes for',obj.constructor.name,' id',obj.id);\r\n        return fetch(`${api}/likes/${obj.constructor.name.toLowerCase()}s/${obj.id}`)\r\n            .then(r=>r.json())\r\n            .then(r=>obj.likes=r);\r\n    }\r\n    static likeObj(obj){\r\n        console.log('firing like on ',obj,obj.id);\r\n        debugger;\r\n        return fetch(`${api}/likes/${obj.constructor.name.toLowerCase()}s/${obj.id}`,{\r\n            method:'POST',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({userid:corktaint.user.id})\r\n        }).then(r=>r.json()).then(r=>{\r\n            obj.likes = obj.likes.concat(r);\r\n            corktaint.refresh();\r\n        });\r\n    }\r\n    static deleteLike(like,obj){\r\n        console.log('firing delete like on',obj,obj.id);\r\n        return fetch(`${api}/likes/${like.id}`,{method:'DELETE'})\r\n            .then(r=>{\r\n                obj.likes.splice(obj.likes.findIndex(a=>a.id==like.id),1);\r\n                corktaint.refresh();\r\n            })\r\n    }\r\n}\r\nexport class Content{\r\n    constructor(content, type = 'text', title, parent, fullValue){\r\n        Object.assign(this, {content, type, title, parent, fullValue});\r\n    }\r\n    render(i){\r\n        // console.log('content #'+this.id+' needs value');\r\n        switch(this.type){\r\n            case 'rating':return <Rating value={this.content} precision={0.1} readOnly={true} size='small' key={i}/>\r\n            case 'tags':return this.content.split(',').map((c,i)=><Chip key={i} label={c} variant='outlined' className='post-tag'/>)\r\n            case 'img':return <img className='content content-img' src={this.content} alt={this.title||''} key={i}/>\r\n            case 'text':default:return <p className='content content-text' key={i}>{this.content}</p>\r\n        }\r\n    }\r\n    static parse(val,parent){\r\n        if(Array.isArray(val))return val.map(a=>Content.parse(a,parent));\r\n        let match = (val.match(/(\\[(.*?)\\]\\((.*?)\\))/)||[]).slice(2);\r\n        if(match.length > 1)return new Content(match[1], match[0], match[0],parent,val);\r\n        else return new Content(val,'text','hi',parent,val);\r\n    }\r\n    static toBody(a){\r\n        return a.map(b=>b.content);\r\n    }\r\n    static fullValues(a){ return a.map(b=>b.fullValue)}\r\n}\r\n\r\nexport const corktaint ={\r\n    refresh:()=>{\r\n        console.log('refreshing',corktaint.user,User.users);\r\n        corktaint.setPage(Post.render(corktaint.posts));\r\n    },\r\n    reply:null,\r\n    posts:[],\r\n    User,\r\n    Post\r\n};\r\nwindow.corktaint=corktaint;","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\index.js",[],"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\App.js",["72","73","74","75"],"import logo from './logo.svg';\nimport './App.css';\nimport {Switch, Route, BrowserRouter as Router} from 'react-router-dom';\nimport Home from './components/Home/Home';\nimport Login from './components/Login/Login';\nimport Navbar from './components/Navbar/Navbar';\nimport SingleUser from './components/SingleUser/SingleUser';\nimport { useState } from 'react';\n\n\nfunction App() {\n    const [user,setUser] = useState(null);\n  return !user?<Login setUser={setUser}/>:\n        <div className=\"App col\">\n            <Router>\n            <Navbar/>\n            <Home/>\n            </Router>\n        </div>\n}\n\nexport default App;","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Navbar\\Navbar.js",["76","77","78","79","80","81"],"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\SingleUser\\SingleUser.js",[],"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Login\\Login.js",["82"],"import { Button, Radio, TextField } from '@material-ui/core';\r\nimport { useState } from 'react';\r\nimport GoogleLogin from 'react-google-login';\r\nimport Terms from '../Terms/Terms';\r\nimport {corktaint,api, User} from '../Helper';\r\nexport default function Login(props){\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [agree, setAgree] = useState(false);\r\n    const setUser = user =>{\r\n        corktaint.user = new User(user);\r\n        props.setUser(true);\r\n    }\r\n    const responseGoogle = r =>{\r\n        setEmail(r.profileObj.email);\r\n        setName(r.profileObj.name || `${r.profileObj.givenName} ${r.profileObj.familyName}`);\r\n        fetch(`${api}/userWithEmail/${r.profileObj.email}`)\r\n            .then(r=>r.json()).then(r=>r[0]&&setUser(r[0]));\r\n    }\r\n    const submit = () => {\r\n        fetch(`${api}/users`,{\r\n            headers:{'Content-Type':'application/json'},\r\n            method:'post',\r\n            body:JSON.stringify({name,email})\r\n        }).then(r=>r.json()).then(r=>setUser(r[0]))\r\n    }\r\n   \r\n    return <div className='col login-container'>\r\n            {!email?\r\n            <GoogleLogin\r\n    clientId=\"952817535193-1lhs434tqvkj2q3fl92bgpb3d2gs6uet.apps.googleusercontent.com\"\r\n    buttonText=\"Login\"\r\n    onSuccess={responseGoogle}\r\n    onFailure={responseGoogle}\r\n    cookiePolicy={'single_host_origin'}\r\n  />:<div className='sign-up-form'>\r\n      <TextField label=\"Email\" variant=\"outlined\" value={email} onInput={e=>setEmail(e.target.value)} disabled={true}/><br/><br/>\r\n      <TextField label=\"Name\" variant=\"outlined\" value={name} onInput={e=>setName(e.target.value)} />\r\n      <Terms/>\r\n      <Radio color=\"default\" color='primary' checked={agree} onClick={()=>setAgree(!agree)} /> I will contribute positively towards the community<br/><br/>\r\n      <Button variant=\"contained\" color=\"primary\" disabled={!agree} onClick={submit}>Sip the Kool-Aid</Button>\r\n      </div>\r\n  }\r\n        </div>\r\n}","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Terms\\Terms.js",[],"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\NavbarModal\\NavbarModal.js",["83","84"],"import { useEffect, useState } from \"react\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport {PostAdd} from '@material-ui/icons';\r\nimport { corktaint } from \"../Helper\";\r\nimport './NavbarModal.css';\r\n\r\nconst types ={\r\n    messenger:{name:'Messenger',bottom:'10%'}\r\n}\r\nexport default function NavbarModal(props){\r\n    const obj = types[props.type];\r\n    const [anim, setAnim] = useSpring(()=>({bottom:'100%'}));\r\n    const [reply, setReply] = useState(null);\r\n    const close = ()=> {\r\n        setAnim({bottom:'100%'});\r\n        window.setTimeout(()=>props.onClose(),500);\r\n    }\r\n    useEffect(()=>setAnim({bottom:obj.bottom}),[])\r\n    return <animated.div className='navbar-modal-container col' style={anim}>\r\n        {props.close?close():null}\r\n        <div className='navbar-modal-header row' onClick={close}>\r\n            <h1>{obj.name}</h1><PostAdd className='new-message-button' onClick={()=>{setReply(corktaint.reply=obj)}} />\r\n        </div>\r\n        <div className=''>\r\n            \r\n        </div>\r\n    </animated.div>\r\n}","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\WineMap\\WineMap.js",[],{"ruleId":"85","severity":1,"message":"86","line":4,"column":16,"nodeType":"87","messageId":"88","endLine":4,"endColumn":20},{"ruleId":"85","severity":1,"message":"89","line":6,"column":30,"nodeType":"87","messageId":"88","endLine":6,"endColumn":36},{"ruleId":"85","severity":1,"message":"90","line":8,"column":41,"nodeType":"87","messageId":"88","endLine":8,"endColumn":47},{"ruleId":"85","severity":1,"message":"91","line":35,"column":12,"nodeType":"87","messageId":"88","endLine":35,"endColumn":16},{"ruleId":"85","severity":1,"message":"92","line":35,"column":18,"nodeType":"87","messageId":"88","endLine":35,"endColumn":25},{"ruleId":"93","severity":1,"message":"94","line":76,"column":34,"nodeType":"95","messageId":"96","endLine":76,"endColumn":36},{"ruleId":"97","severity":1,"message":"98","line":5,"column":1,"nodeType":"99","endLine":36,"endColumn":2},{"ruleId":"93","severity":1,"message":"100","line":24,"column":54,"nodeType":"95","messageId":"96","endLine":24,"endColumn":56},{"ruleId":"85","severity":1,"message":"101","line":1,"column":10,"nodeType":"87","messageId":"88","endLine":1,"endColumn":16},{"ruleId":"93","severity":1,"message":"94","line":55,"column":48,"nodeType":"95","messageId":"96","endLine":55,"endColumn":50},{"ruleId":"93","severity":1,"message":"94","line":56,"column":33,"nodeType":"95","messageId":"96","endLine":56,"endColumn":35},{"ruleId":"93","severity":1,"message":"100","line":62,"column":37,"nodeType":"95","messageId":"96","endLine":62,"endColumn":39},{"ruleId":"93","severity":1,"message":"94","line":70,"column":37,"nodeType":"95","messageId":"96","endLine":70,"endColumn":39},{"ruleId":"93","severity":1,"message":"94","line":181,"column":48,"nodeType":"95","messageId":"96","endLine":181,"endColumn":50},{"ruleId":"93","severity":1,"message":"94","line":193,"column":41,"nodeType":"95","messageId":"96","endLine":193,"endColumn":43},{"ruleId":"93","severity":1,"message":"94","line":200,"column":34,"nodeType":"95","messageId":"96","endLine":200,"endColumn":36},{"ruleId":"93","severity":1,"message":"94","line":200,"column":69,"nodeType":"95","messageId":"96","endLine":200,"endColumn":71},{"ruleId":"93","severity":1,"message":"100","line":216,"column":40,"nodeType":"95","messageId":"96","endLine":216,"endColumn":42},{"ruleId":"93","severity":1,"message":"100","line":221,"column":40,"nodeType":"95","messageId":"96","endLine":221,"endColumn":42},{"ruleId":"93","severity":1,"message":"94","line":297,"column":61,"nodeType":"95","messageId":"96","endLine":297,"endColumn":63},{"ruleId":"85","severity":1,"message":"102","line":1,"column":8,"nodeType":"87","messageId":"88","endLine":1,"endColumn":12},{"ruleId":"85","severity":1,"message":"103","line":3,"column":9,"nodeType":"87","messageId":"88","endLine":3,"endColumn":15},{"ruleId":"85","severity":1,"message":"104","line":3,"column":17,"nodeType":"87","messageId":"88","endLine":3,"endColumn":22},{"ruleId":"85","severity":1,"message":"105","line":7,"column":8,"nodeType":"87","messageId":"88","endLine":7,"endColumn":18},{"ruleId":"97","severity":1,"message":"98","line":12,"column":1,"nodeType":"99","endLine":35,"endColumn":2},{"ruleId":"85","severity":1,"message":"92","line":13,"column":18,"nodeType":"87","messageId":"88","endLine":13,"endColumn":25},{"ruleId":"93","severity":1,"message":"94","line":20,"column":89,"nodeType":"95","messageId":"96","endLine":20,"endColumn":91},{"ruleId":"93","severity":1,"message":"94","line":21,"column":97,"nodeType":"95","messageId":"96","endLine":21,"endColumn":99},{"ruleId":"93","severity":1,"message":"94","line":22,"column":97,"nodeType":"95","messageId":"96","endLine":22,"endColumn":99},{"ruleId":"93","severity":1,"message":"94","line":23,"column":102,"nodeType":"95","messageId":"96","endLine":23,"endColumn":104},{"ruleId":"106","severity":1,"message":"107","line":40,"column":30,"nodeType":"108","endLine":40,"endColumn":45},{"ruleId":"85","severity":1,"message":"109","line":13,"column":12,"nodeType":"87","messageId":"88","endLine":13,"endColumn":17},{"ruleId":"110","severity":1,"message":"111","line":18,"column":48,"nodeType":"112","endLine":18,"endColumn":50,"suggestions":"113"},"no-unused-vars","'User' is defined but never used.","Identifier","unusedVar","'config' is defined but never used.","'Router' is defined but never used.","'view' is assigned a value but never used.","'setView' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Expected '!==' and instead saw '!='.","'Button' is defined but never used.","'logo' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'SingleUser' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'reply' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'obj.bottom' and 'setAnim'. Either include them or remove the dependency array.","ArrayExpression",["114"],{"desc":"115","fix":"116"},"Update the dependencies array to be: [obj.bottom, setAnim]",{"range":"117","text":"118"},[640,642],"[obj.bottom, setAnim]"]
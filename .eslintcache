[{"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Home\\Home.js":"1","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Reply\\Reply.js":"2","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Helper.js":"3"},{"size":2862,"mtime":1606543274367,"results":"4","hashOfConfig":"5"},{"size":1950,"mtime":1606520893404,"results":"6","hashOfConfig":"5"},{"size":11195,"mtime":1606519599300,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"lao15b",{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Home\\Home.js",["16","17","18"],"C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Reply\\Reply.js",["19","20"],"import { Button } from \"@material-ui/core\"\r\nimport { useState } from \"react\"\r\nimport { parseBody, Comment, Content, Post } from \"../Helper\"\r\n\r\nexport default props => {\r\n    const [value, setValue] = useState(props.value || '');\r\n    return (\r\n        <div className='reply-container col'>\r\n            <div className='reply-content row'>\r\n                <textarea id='reply' onInput={e=>setValue(e.target.value)} defaultValue={value}/>\r\n                <div className='reply-preview'>\r\n                    <h3 className='preview-title'>Preview:</h3>\r\n                    <div className='preview-contents'>{parseBody(value).map((c,i)=>c.render(i))}</div>\r\n                </div>\r\n            </div>\r\n            <div className='reply-buttons row'>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={()=>{\r\n                    if(window.corktaint.reply.postMode){\r\n                        Post.submitPost(Content.fullValues(parseBody(value)))\r\n                    }else{\r\n                        if(window.corktaint.reply.replyMode != 'edit')\r\n                        Comment.addCommentTo(window.corktaint.reply, Content.toBody(parseBody(value)))\r\n                        .then(r=>{\r\n                            window.corktaint.reply = null;\r\n                                window.corktaint.refresh();\r\n                            });\r\n                    else\r\n                    window.corktaint.reply.edit(Content.fullValues(parseBody(value)))\r\n                    .then(r=>{\r\n                        window.corktaint.reply = null;\r\n                        window.corktaint.refresh();\r\n                    });\r\n                }\r\n                }}>Submit</Button>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={()=>{\r\n                    window.corktaint.reply = null;\r\n                    window.corktaint.refresh();\r\n                }}>Cancel</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Tubut\\Desktop\\Development\\wine-map\\src\\components\\Helper.js",["21","22","23","24","25","26","27","28","29","30","31"],"import { Fab } from \"@material-ui/core\";\r\nimport { Add } from \"@material-ui/icons\"\r\nimport Reply from \"./Reply/Reply\";\r\n\r\nexport const api = 'http://localhost:2999';\r\nexport const parseBody = body =>\r\n    [...body.replace(/\\n\\s*\\n/g, '\\n').split('\\n')].map(x=>Content.parse(x));\r\n// CREATE TABLE users (\r\n//     id serial primary key,\r\n//     name VARCHAR(32),\r\n//     email VARCHAR(64),\r\n//     last_login timestamp NOT NULL DEFAULT NOW(),\r\n//     achievements VARCHAR(64)[],\r\n//     score integer DEFAULT 0\r\n//   );\r\nexport class User{  \r\n    constructor(id, name, email, achievements, score){\r\n        if(!name) Object.assign(this,id);\r\n        else Object.assign(this, {id, name, email, achievements, score});\r\n        User[this.id] = this;\r\n    }\r\n    static users = [];\r\n    static from(a){\r\n        return a.map(b=>new User(b));\r\n    }\r\n}\r\n// id serial primary key,\r\n// postType VARCHAR(32),\r\n// broadcast varchar(32) default 'Public',\r\n// body text[],\r\n// title varchar(80),\r\n// postDate timestamp NOT NULL DEFAULT NOW(),\r\n// userId int NOT NULL,\r\n// FOREIGN KEY(userId) REFERENCES users(id) ON DELETE CASCADE\r\nexport class Post{\r\n    constructor(id,userId,title,body = [], comments=[],postDate){\r\n        if(!userId) Object.assign(this,{comments:[],body:[]},id);\r\n        else Object.assign(this,{comments:[],body:[]},{id, userId,title,comments,body,postDate});\r\n        this.body = Content.parse(this.body);\r\n        // console.log(arguments);\r\n        Post.posts[this.id] = this;\r\n    }\r\n    static posts = []\r\n    render(user){\r\n        var like = this.likes.find(l=>l.userid==this.userid);\r\n        console.log('individual post #',this.id,' with ',this.comments.length,'comments','is replying?',window.corktaint.reply==this);\r\n        return (\r\n            <div className='content-post col' key={this.id}>\r\n                <div className='col post-container'>\r\n                    {this.body.map((c,i)=>c.render(i))}\r\n                </div>\r\n                <p className='post-credit'>- {window.corktaint.user.name}</p>\r\n                <div className='post-like-count' >\r\n                    <span onClick={()=>like?Like.deleteLike(like,this):Like.likeObj(this)}>{this.likes.length} {like?<>❤️</>:<>♡</>}</span>\r\n                    {window.corktaint.reply==this?<Reply/>:\r\n                    <span className='row'><Fab color='primary' onClick={()=>{window.corktaint.reply=this;window.corktaint.refresh()}}>\r\n                        <Add/>\r\n                    </Fab></span>\r\n                    }\r\n                </div>\r\n                <div className='post-comments'>\r\n                    {this.comments.length?\r\n                        this.comments.map((c,i)=>c.render(user,i)):\r\n                        <p>No Comments Yet...{this.comments.length}</p>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    static render(user,posts){\r\n        console.log('starting page render');\r\n        window.corktaint.setPosts(posts);\r\n        return (\r\n            <div className='content-posts col wrap'>\r\n                {posts.map(p=>p.render(user))}\r\n            </div>\r\n        )\r\n    }\r\n    static createPostFrom(userid,title,body){\r\n        // console.log('creating post at',Post.posts.length, title, body);\r\n        return new Post(Post.posts.length, userid, title, parseBody(body));\r\n    }\r\n    static async from(a){\r\n        let posts = a.map(b=>new Post(b));\r\n        var promises = posts.map(p=>fetch(`${api}/comments/posts/${p.id}`)\r\n            .then(r=>r.json())\r\n            .then(r=>{\r\n                const [a,b] = Comment.from(r,5);\r\n                p.comments = a;\r\n                a.forEach(aa=>aa.parent = p);\r\n                return Promise.all(b);\r\n            }\r\n        )).concat(posts.map(p=>Like.getLikesFor(p)));\r\n        do{\r\n            promises = (await Promise.all(promises)).filter(p=>p.then);\r\n        }\r\n        while(promises.length);\r\n        console.log('finished',posts,window.corktaint);\r\n        window.corktaint.setPage(Post.render(window.corktaint.user,posts));\r\n    }\r\n}\r\n// id serial primary key,\r\n// broadcast varchar(32) default 'Public',\r\n// body text[],\r\n// userId int NOT NULL,\r\n// FOREIGN KEY(userId) REFERENCES users(id) ON DELETE CASCADE,\r\n// postDate timestamp NOT NULL DEFAULT NOW()\r\nexport class Comment{\r\n    constructor(id, body = [], userid, comments = [], postdate = ''){\r\n        Object.assign(this,{body:[],comments:[],likes:[]});\r\n        if(!body.length) Object.assign(this,id);\r\n        else Object.assign(this,{id, body, userid, comments, postdate});\r\n        this.body = Content.parse(this.body, this);\r\n        ['likeClick','unlikeClick','editClick','destroy','replyClick'].forEach(f=>this[f]=this[f].bind(this));\r\n    }\r\n    render(user){\r\n        var like = this.likes.find(l=>l.userid==this.userid);\r\n        // console.log(this.body,this.comments);\r\n        return [\r\n            <div className='comment-container' key={this.id}>\r\n                {this.body.map((c,i)=>c.render(i))}\r\n                {this.likes.length ? <p className='comment-like-count'>{this.likes.length} ❤️</p> : null}\r\n                <div className='comment-options'>\r\n                    { !like ?\r\n                        <><span onClick={()=>this.likeClick(user)}>Like</span> | </>:\r\n                        <><span onClick={()=>this.unlikeClick(like)}>Unlike</span> | </>\r\n                    }\r\n                    <span onClick={()=>this.replyClick()}> Reply</span> |\r\n                    { user.id == this.userid || user.admin ?\r\n                        <>\r\n                            <span onClick={()=>this.editClick(user)}> Edit</span> | \r\n                            <span onClick={()=>this.destroy()} > Delete</span>\r\n                        </>:null\r\n                    }    \r\n                </div>\r\n                { window.corktaint.reply==this?<Reply value={this.replyMode=='reply'?null:Content.fullValues(this.body).join('\\n')}/>:null}\r\n                <div className='comment-chain'>\r\n                    {this.comments.map((c)=>c.render(user))}\r\n                </div>\r\n            </div>\r\n        ]\r\n    }\r\n    unlikeClick(like){\r\n        Like.deleteLike(like,this);\r\n    }\r\n    replyClick(){\r\n        window.corktaint.reply=window.corktaint.reply!=this?this:null;\r\n        this.replyMode = 'reply';\r\n        window.corktaint.refresh();\r\n    }\r\n    likeClick(user){\r\n        Like.likeObj(this);\r\n    }\r\n    editClick(){\r\n        window.corktaint.reply=window.corktaint.reply!=this?this:null;\r\n        this.replyMode = 'edit';\r\n        window.corktaint.refresh();\r\n    }\r\n    destroy(){\r\n        fetch(`${api}/comments/${this.id}`,{method:'delete'})\r\n            .then(r=>{\r\n                this.parent.comments.splice(this.parent.comments.indexOf(this),1);\r\n                window.corktaint.refresh();\r\n            });\r\n    }\r\n    async edit(body){\r\n        return fetch(`${api}/comments/${this.id}`,{\r\n            method:'put',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({body})\r\n        }).then(()=>this.body = Content.parse(body));\r\n    }\r\n    static from(a, i, set){\r\n        if(--i<0)return [];\r\n        let comments = a.map(b=>new Comment(b));\r\n        var promises = comments.map(c=>fetch(`${api}/comments/comments/${c.id}`)\r\n            .then(r=>r.json())\r\n            .then(r=>{\r\n                const [a,b]=Comment.from(r,i);\r\n                c.comments = a || [];\r\n                c.comments.forEach(cc=>cc.parent=c);\r\n                if(b)return Promise.all(b);\r\n            })).concat(comments.map(c=>Like.getLikesFor(c)));\r\n        return [comments, promises]\r\n    }\r\n    static async addCommentTo(obj,body){\r\n        return fetch(`${api}/comments/${obj.constructor.name.toLowerCase()}s/${obj.id}`,{\r\n            method:'post',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({body,userid:window.corktaint.user.id})\r\n        }).then(r=>r.json()).then(r=>{\r\n            var c=new Comment(r[0]);\r\n            c.parent=obj;\r\n            obj.comments.push(c);\r\n            return 1;\r\n        });\r\n    }\r\n}\r\nexport class Like{\r\n    constructor(a){\r\n        Object.assign(this,a);\r\n    }\r\n    static getLikesFor(obj){\r\n        // console.log('atempting to get likes for',obj.constructor.name,' id',obj.id);\r\n        return fetch(`${api}/likes/${obj.constructor.name.toLowerCase()}s/${obj.id}`)\r\n            .then(r=>r.json())\r\n            .then(r=>obj.likes=r);\r\n    }\r\n    static likeObj(obj){\r\n        console.log(`${api}/likes/${obj.constructor.name}s/${obj.id}`);\r\n        return fetch(`${api}/likes/${obj.constructor.name.toLowerCase()}s/${obj.id}`,{\r\n            method:'POST',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({userid:window.corktaint.user.id})\r\n        }).then(r=>r.json()).then(r=>{\r\n            obj.likes = obj.likes.concat(r);\r\n            window.corktaint.refresh();\r\n        });\r\n    }\r\n    static deleteLike(like,obj){\r\n        return fetch(`${api}/likes/${like.id}`,{method:'DELETE'})\r\n            .then(r=>{\r\n                obj.likes.splice(obj.likes.findIndex(a=>a.id==like.id),1);\r\n                window.corktaint.refresh();\r\n            })\r\n    }\r\n}\r\nexport class Content{\r\n    constructor(content, type = 'text', title, parent, fullValue){\r\n        Object.assign(this, {content, type, title, parent, fullValue});\r\n    }\r\n    render(i){\r\n        // console.log('content #'+this.id+' needs value');\r\n        return this.type == 'text' ?\r\n            (<p className='content content-text' key={i}>{this.content}</p>):\r\n            (<img className='content content-img' src={this.content} alt={this.title||''} key={i}/>)\r\n    }\r\n    static parse(val,parent){\r\n        if(Array.isArray(val))return val.map(a=>Content.parse(a,parent));\r\n        let match = val.match(/(\\[(.*?)\\]\\((.*?)\\))/);\r\n        // console.log('found match',match);\r\n        if(match && match.length > 1)return new Content(match[3], 'img', match[4],parent,val);\r\n        else return new Content(val,'text','hi',parent,val);\r\n    }\r\n    static toBody(a){\r\n        return a.map(b=>b.content);\r\n    }\r\n    static fullValues(a){ return a.map(b=>b.fullValue)}\r\n}\r\n\r\n/*export const abe = new User(0,'Abe Johnson');\r\n\r\nexport const firstPost = new Post(Post.posts.length, abe,'This is my first post',[new Content('Here is my first content post'),new Content('It is filled with information'),new Content('https://s3-cdn.withwine.com/Wine/zrLjkNQrhk2dPco2FplGNg.png?h=256&autorotate=true','img','wine'), new Content('Ex Dee')]);\r\nexport const p2 = new Post(Post.posts.length, abe,'This is my second post',[new Content('Here is my first content post'),new Content('It is filled with information'),new Content('https://s3-cdn.withwine.com/Wine/zrLjkNQrhk2dPco2FplGNg.png?h=256&autorotate=true','img','wine'), new Content('Ex Dee')]);\r\nexport const p3 = new Post(Post.posts.length, abe,'This is my third post',[new Content('Here is my first content post'),new Content('It is filled with information'),new Content('https://s3-cdn.withwine.com/Wine/zrLjkNQrhk2dPco2FplGNg.png?h=256&autorotate=true','img','wine'), new Content('Ex Dee')]);\r\n*/",{"ruleId":"32","severity":1,"message":"33","line":6,"column":30,"nodeType":"34","messageId":"35","endLine":6,"endColumn":36},{"ruleId":"36","severity":1,"message":"37","line":12,"column":1,"nodeType":"38","endLine":76,"endColumn":2},{"ruleId":"39","severity":1,"message":"40","line":59,"column":37,"nodeType":"41","messageId":"42","endLine":59,"endColumn":39},{"ruleId":"36","severity":1,"message":"37","line":5,"column":1,"nodeType":"38","endLine":42,"endColumn":2},{"ruleId":"39","severity":1,"message":"43","line":21,"column":61,"nodeType":"41","messageId":"42","endLine":21,"endColumn":63},{"ruleId":"39","severity":1,"message":"40","line":45,"column":47,"nodeType":"41","messageId":"42","endLine":45,"endColumn":49},{"ruleId":"39","severity":1,"message":"40","line":46,"column":127,"nodeType":"41","messageId":"42","endLine":46,"endColumn":129},{"ruleId":"39","severity":1,"message":"40","line":55,"column":44,"nodeType":"41","messageId":"42","endLine":55,"endColumn":46},{"ruleId":"39","severity":1,"message":"40","line":117,"column":47,"nodeType":"41","messageId":"42","endLine":117,"endColumn":49},{"ruleId":"39","severity":1,"message":"40","line":129,"column":31,"nodeType":"41","messageId":"42","endLine":129,"endColumn":33},{"ruleId":"39","severity":1,"message":"40","line":136,"column":41,"nodeType":"41","messageId":"42","endLine":136,"endColumn":43},{"ruleId":"39","severity":1,"message":"40","line":136,"column":76,"nodeType":"41","messageId":"42","endLine":136,"endColumn":78},{"ruleId":"39","severity":1,"message":"43","line":147,"column":54,"nodeType":"41","messageId":"42","endLine":147,"endColumn":56},{"ruleId":"39","severity":1,"message":"43","line":155,"column":54,"nodeType":"41","messageId":"42","endLine":155,"endColumn":56},{"ruleId":"39","severity":1,"message":"40","line":223,"column":61,"nodeType":"41","messageId":"42","endLine":223,"endColumn":63},{"ruleId":"39","severity":1,"message":"40","line":234,"column":26,"nodeType":"41","messageId":"42","endLine":234,"endColumn":28},"no-unused-vars","'config' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='."]